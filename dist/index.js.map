{"version":3,"file":"index.js","sources":["../src/mixins/doc/qVariables.ts","../src/mixins/doc/qTablesAndFields.ts","../src/mixins/doc/qSelections.ts","../src/mixins/doc/extension-objects.ts","../src/mixins/doc/bookmarks.ts","../src/mixins/doc/unbuild.ts","../src/mixins/doc/build.ts","../src/index.ts"],"sourcesContent":["export async function mVariableGetAll(\r\n  showConfig?: boolean,\r\n  showReserved?: boolean\r\n): Promise<EngineAPI.INxVariableListItem[]> {\r\n  const _this: EngineAPI.IApp = this;\r\n  const objProp: EngineAPI.IGenericVariableListProperties = {\r\n    qInfo: {\r\n      qType: \"VariableList\",\r\n    },\r\n    qVariableListDef: {\r\n      qData: {},\r\n      qShowConfig: false,\r\n      qShowReserved: false,\r\n      qType: \"variable\",\r\n    },\r\n  };\r\n\r\n  if (showConfig) objProp.qShowConfig = showConfig;\r\n  if (showReserved) objProp.qShowReserved = showReserved;\r\n\r\n  const sessionObj = await _this.createSessionObject(objProp);\r\n\r\n  const layout =\r\n    (await sessionObj.getLayout()) as EngineAPI.IGenericVariableListLayout;\r\n\r\n  await _this.destroySessionObject(sessionObj.id);\r\n\r\n  return (layout as any).qVariableList\r\n    .qItems as EngineAPI.INxVariableListItem[];\r\n}\r\n\r\nexport async function mVariableUpdateById(\r\n  id: string,\r\n  name?: string,\r\n  definition?: string,\r\n  comment?: string\r\n): Promise<EngineAPI.IGenericVariableProperties> {\r\n  const _this: EngineAPI.IApp = this;\r\n\r\n  if (!id) throw new Error(`mVariableUpdateById: \"id\" parameter is required`);\r\n\r\n  const variable = await _this.getVariableById(id);\r\n\r\n  const variableProps = await variable.getProperties();\r\n\r\n  if (name) variableProps.qName = name;\r\n  if (definition) variableProps.qDefinition = definition;\r\n  if (comment) variableProps.qComment = comment;\r\n\r\n  const setProps = await variable.setProperties(variableProps);\r\n\r\n  const newProps = await variable.getProperties();\r\n\r\n  return newProps;\r\n}\r\n\r\nexport async function mVariableUpdateByName(\r\n  name: string,\r\n  newName?: string,\r\n  definition?: string,\r\n  comment?: string\r\n): Promise<EngineAPI.IGenericVariableProperties> {\r\n  const _this: EngineAPI.IApp = this;\r\n\r\n  if (!name)\r\n    throw new Error(`mVariableUpdateByName: \"name\" parameter is required`);\r\n\r\n  const variable = await _this.getVariableByName(name);\r\n\r\n  const variableProps = await variable.getProperties();\r\n\r\n  if (newName) variableProps.qName = newName;\r\n  if (definition) variableProps.qDefinition = definition;\r\n  if (comment) variableProps.qComment = comment;\r\n\r\n  const setProps = await variable.setProperties(variableProps);\r\n\r\n  const newProps = await variable.getProperties();\r\n\r\n  return newProps;\r\n}\r\n\r\nexport async function mVariableCreate(\r\n  name: string,\r\n  definition?: string,\r\n  comment?: string\r\n): Promise<EngineAPI.IGenericVariableProperties> {\r\n  const _this: EngineAPI.IApp = this;\r\n\r\n  if (!name) throw new Error(`mVariableCreate: \"name\" parameter is required`);\r\n\r\n  const varProps = {\r\n    qInfo: {\r\n      qType: \"variable\",\r\n    },\r\n    qName: name,\r\n    qDefinition: definition ? definition : \"\",\r\n    qComment: comment ? comment : \"\",\r\n    qIncludeInBookmark: false,\r\n  };\r\n\r\n  const created = await _this.createVariableEx(varProps);\r\n\r\n  const variableInst = await _this.getVariableById((created as any).id);\r\n\r\n  const props = await variableInst.getProperties();\r\n\r\n  return props;\r\n}\r\n","export async function mGetTablesAndFields(): Promise<\r\n  { table: string; field: string }[]\r\n> {\r\n  const _this: EngineAPI.IApp = this;\r\n\r\n  const tables = await _this.getTablesAndKeys(\r\n    {} as EngineAPI.ISize,\r\n    {} as EngineAPI.ISize,\r\n    0,\r\n    true,\r\n    false\r\n  );\r\n\r\n  return tables.qtr\r\n    .map(function (t) {\r\n      return t.qFields.map(function (f) {\r\n        return { table: t.qName, field: f.qName };\r\n      });\r\n    })\r\n    .flat();\r\n}\r\n\r\nexport async function mGetTables(): Promise<string[]> {\r\n  const _this: EngineAPI.IApp = this;\r\n\r\n  const qTables = await _this.getTablesAndKeys(\r\n    {} as EngineAPI.ISize,\r\n    {} as EngineAPI.ISize,\r\n    0,\r\n    true,\r\n    false\r\n  );\r\n\r\n  return qTables.qtr.map((t) => t.qName);\r\n}\r\n\r\nexport async function mGetFields(): Promise<string[]> {\r\n  const _this: EngineAPI.IApp = this;\r\n\r\n  const qTables = await _this.getTablesAndKeys(\r\n    {} as EngineAPI.ISize,\r\n    {} as EngineAPI.ISize,\r\n    0,\r\n    true,\r\n    false\r\n  );\r\n\r\n  return qTables.qtr\r\n    .map(function (t) {\r\n      return t.qFields.map(function (f) {\r\n        return f.qName;\r\n      });\r\n    })\r\n    .flat();\r\n}\r\n\r\n// TODO: option to specify if full data to be extracted (loop though all data pages)\r\nexport async function mCreateSessionListbox(\r\n  fieldName: string,\r\n  state?: string,\r\n  type?: string\r\n): Promise<{\r\n  obj: EngineAPI.IGenericObject;\r\n  layout: EngineAPI.IGenericBaseLayout;\r\n  props: EngineAPI.IGenericObjectProperties;\r\n}> {\r\n  const _this: EngineAPI.IApp = this;\r\n\r\n  const lbDef = {\r\n    qInfo: {\r\n      qId: \"\",\r\n      qType: type ? type : \"session-listbox\",\r\n    },\r\n    field: {\r\n      qListObjectDef: {\r\n        qStateName: state ? state : \"$\",\r\n        qDef: {\r\n          qFieldDefs: [fieldName],\r\n          qSortCriterias: [\r\n            {\r\n              qSortByState: 1,\r\n              qExpression: {},\r\n            },\r\n          ],\r\n        },\r\n        qInitialDataFetch: [\r\n          {\r\n            qTop: 0,\r\n            qLeft: 0,\r\n            qHeight: 10000,\r\n            qWidth: 1,\r\n          },\r\n        ],\r\n      },\r\n    },\r\n  };\r\n\r\n  const obj = await _this.createSessionObject(lbDef);\r\n  const [props, layout] = await Promise.all([\r\n    await obj.getProperties(),\r\n    await obj.getLayout(),\r\n  ]);\r\n\r\n  return {\r\n    obj,\r\n    layout,\r\n    props,\r\n  };\r\n}\r\n","async function iGetSelectionsNative(\r\n  qDoc: EngineAPI.IApp\r\n): Promise<EngineAPI.IGenericSelectionListLayout> {\r\n  const lbDef: EngineAPI.IGenericSelectionListProperties = {\r\n    qInfo: {\r\n      qId: \"\",\r\n      qType: \"CurrentSelection\",\r\n    },\r\n    qSelectionObjectDef: {},\r\n  };\r\n\r\n  const sessionObj = await qDoc.createSessionObject(lbDef);\r\n\r\n  const selections = await sessionObj.getLayout();\r\n\r\n  await qDoc.destroySessionObject(sessionObj.id);\r\n\r\n  return selections;\r\n}\r\n\r\nexport async function mSelectionsAll(): Promise<EngineAPI.ISelectionListObject> {\r\n  const _this: EngineAPI.IApp = this;\r\n  const selections = await iGetSelectionsNative(_this);\r\n\r\n  return selections.qSelectionObject;\r\n}\r\n\r\nexport async function mSelectionsFields(): Promise<string[]> {\r\n  const _this: EngineAPI.IApp = this;\r\n\r\n  const selections = await iGetSelectionsNative(_this);\r\n\r\n  const fieldsSelected = selections.qSelectionObject.qSelections.map(function (\r\n    s\r\n  ) {\r\n    return s.qField;\r\n  });\r\n\r\n  return fieldsSelected;\r\n}\r\n\r\nexport async function mSelectionsSimple(): Promise<\r\n  { field: string; values: string[] }[]\r\n> {\r\n  const _this: EngineAPI.IApp = this;\r\n  const selections = await iGetSelectionsNative(_this);\r\n\r\n  return selections.qSelectionObject.qSelections.map(function (s) {\r\n    const values = s.qSelectedFieldSelectionInfo.map(function (f) {\r\n      return f.qName;\r\n    });\r\n\r\n    return { field: s.qField, values };\r\n  });\r\n}\r\n\r\nexport async function mSelectionsSimpleGrouped(): Promise<\r\n  { field: string; value: string }[]\r\n> {\r\n  const _this: EngineAPI.IApp = this;\r\n  const selections = await iGetSelectionsNative(_this);\r\n\r\n  return selections.qSelectionObject.qSelections\r\n    .map(function (s) {\r\n      return s.qSelectedFieldSelectionInfo.map(function (f) {\r\n        return { field: s.qField, value: f.qName };\r\n      });\r\n    })\r\n    .flat();\r\n}\r\n\r\nexport async function mSelectInField(\r\n  fieldName: string,\r\n  values: any[],\r\n  toggle?: boolean,\r\n  state?: string\r\n): Promise<boolean> {\r\n  const _this: EngineAPI.IApp = this;\r\n\r\n  if (!fieldName)\r\n    throw new Error(`mSelectInField: \"fieldName\" parameter is required`);\r\n  if (!values)\r\n    throw new Error(`mSelectInField: \"values\" parameter is required`);\r\n\r\n  const lbDef = {\r\n    qInfo: {\r\n      qId: \"\",\r\n      qType: \"session-listbox\",\r\n    },\r\n    field: {\r\n      qListObjectDef: {\r\n        qStateName: state ? state : \"$\",\r\n        qDef: {\r\n          qFieldDefs: [fieldName],\r\n          qSortCriterias: [\r\n            {\r\n              qSortByState: 1,\r\n              qExpression: {},\r\n            },\r\n          ],\r\n        },\r\n        qInitialDataFetch: [\r\n          {\r\n            qTop: 0,\r\n            qLeft: 0,\r\n            qHeight: 10000,\r\n            qWidth: 1,\r\n          },\r\n        ],\r\n      },\r\n    },\r\n  };\r\n\r\n  const sessionObj = await _this.createSessionObject(lbDef);\r\n\r\n  const layout = await sessionObj.getLayout();\r\n\r\n  const index: number[] = (\r\n    layout as any\r\n  ).field.qListObject.qDataPages[0].qMatrix\r\n    .filter(function (m: EngineAPI.INxCell) {\r\n      return values.indexOf(m[0].qText) > -1;\r\n    })\r\n    .map(function (e: EngineAPI.INxCell) {\r\n      return e[0].qElemNumber as number;\r\n    });\r\n\r\n  const selection = await sessionObj.selectListObjectValues(\r\n    \"/field/qListObjectDef\",\r\n    index,\r\n    toggle ? toggle : false\r\n  );\r\n\r\n  await _this.destroySessionObject(sessionObj.id);\r\n\r\n  return selection;\r\n}\r\n","export async function mExtensionObjectsAll() {\r\n  const _this: EngineAPI.IApp = this;\r\n\r\n  const allInfos = await _this.getAllInfos();\r\n\r\n  const props = await _this.getAppProperties();\r\n\r\n  return await filterOnlyExtensionObjects(this, props, allInfos);\r\n}\r\n\r\nasync function filterOnlyExtensionObjects(\r\n  qDoc: EngineAPI.IApp,\r\n  props: EngineAPI.INxAppProperties,\r\n  allObjects: EngineAPI.INxInfo[]\r\n) {\r\n  return await Promise.all(\r\n    allObjects.map(async function (extObj) {\r\n      const isReallyExtension = await realExtensionCheck(qDoc, extObj.qId);\r\n\r\n      if (isReallyExtension.isExtension) {\r\n        return {\r\n          appId: qDoc.id,\r\n          appName: props.qTitle,\r\n          objId: isReallyExtension.qObjProps.qInfo.qId,\r\n          objType: isReallyExtension.qObjProps.qInfo.qType,\r\n          extName: isReallyExtension.qObjProps.extensionMeta.name,\r\n          extVersion: isReallyExtension.qObjProps.version,\r\n          extVisible: isReallyExtension.qObjProps.extensionMeta.visible,\r\n          extIsBundle: !isReallyExtension.qObjProps.extensionMeta.isThirdParty,\r\n          extIsLibrary: isReallyExtension.qObjProps.extensionMeta.isLibraryItem,\r\n          qProps: isReallyExtension.qObjProps,\r\n        };\r\n      }\r\n    })\r\n  ).then(function (o) {\r\n    // make sure we filter out all object which are not\r\n    // native object but are not extensions as well\r\n    return o.filter(function (a) {\r\n      return a != undefined;\r\n    });\r\n  });\r\n}\r\n\r\nconst realExtensionCheck = async function (\r\n  qDoc: EngineAPI.IApp,\r\n  objId: string\r\n) {\r\n  const nativeObjectTypes = [\r\n    \"barchart\",\r\n    \"boxplot\",\r\n    \"combochart\",\r\n    \"distributionplot\",\r\n    \"gauge\",\r\n    \"histogram\",\r\n    \"kpi\",\r\n    \"linechart\",\r\n    \"piechart\",\r\n    \"pivot-table\",\r\n    \"scatterplot\",\r\n    \"table\",\r\n    \"treemap\",\r\n    \"extension\",\r\n    \"map\",\r\n    \"listbox\",\r\n    \"filterpane\",\r\n    \"title\",\r\n    \"paragraph\",\r\n  ];\r\n\r\n  const qObj = await qDoc.getObject(objId);\r\n\r\n  const qObjProps = await qObj.getProperties();\r\n\r\n  if (!qObjProps.visualization) return { isExtension: false };\r\n\r\n  const isNative = nativeObjectTypes.indexOf(qObjProps.visualization);\r\n  return {\r\n    qObjProps,\r\n    isExtension: isNative == -1 && qObjProps.extensionMeta ? true : false,\r\n  };\r\n};\r\n","import { IMBookmarkMeta, ISetAnalysisDestructed } from \"../../index\";\r\n\r\nexport async function mGetBookmarksMeta(\r\n  state?: string\r\n): Promise<IMBookmarkMeta[]> {\r\n  state = state ? state : \"$\";\r\n\r\n  const _this: EngineAPI.IApp = this;\r\n\r\n  const listObj: EngineAPI.IGenericBookmarkListProperties = {\r\n    qInfo: {\r\n      qId: \"BookmarkList\",\r\n      qType: \"BookmarkList\",\r\n    },\r\n    qBookmarkListDef: {\r\n      qType: \"bookmark\",\r\n      qData: {\r\n        // dynamic data stored by the Qlik Sense client\r\n        title: \"/qMetaDef/title\",\r\n        description: \"/qMetaDef/description\",\r\n        sheetId: \"/sheetId\",\r\n        selectionFields: \"/selectionFields\",\r\n        creationDate: \"/creationDate\",\r\n      },\r\n    },\r\n  };\r\n\r\n  const sessionObject = await _this.createSessionObject(listObj);\r\n  const sessionObjectLayout = await sessionObject.getLayout();\r\n  const bookmarks = sessionObjectLayout.qBookmarkList.qItems;\r\n\r\n  await this.destroySessionObject(sessionObject.id);\r\n\r\n  return await Promise.all(\r\n    bookmarks.map(async (bookmark) => {\r\n      return await getBookmarkMeta(bookmark.qInfo.qId, state, _this);\r\n    })\r\n  );\r\n}\r\n\r\nexport async function mGetBookmarkMeta(\r\n  bookmarkId: string,\r\n  state?: string\r\n): Promise<IMBookmarkMeta> {\r\n  if (!bookmarkId)\r\n    throw new Error(`mGetBookmarkMeta: \"bookmarkId\" parameter is required`);\r\n\r\n  state = state ? state : \"$\";\r\n\r\n  const _this: EngineAPI.IApp = this;\r\n\r\n  return await getBookmarkMeta(bookmarkId, state, _this);\r\n}\r\n\r\nexport async function mCreateBookmarkFromMeta(\r\n  bookmarkMeta: IMBookmarkMeta,\r\n  title: string,\r\n  description?: string\r\n): Promise<string> {\r\n  if (!title)\r\n    throw new Error(`mCreateBookmarkFromMeta: \"title\" parameter is required`);\r\n\r\n  const _this: EngineAPI.IApp = this;\r\n\r\n  return await createBookmarkFromMeta(\r\n    _this,\r\n    bookmarkMeta,\r\n    title,\r\n    description ? description : \"\"\r\n  );\r\n}\r\n\r\nexport async function mGetBookmarkValues(bookmarkId: string, state?: string) {\r\n  if (!bookmarkId)\r\n    throw new Error(`mGetBookmarkValues: \"bookmarkId\" parameter is required`);\r\n\r\n  state = state ? state : \"$\";\r\n  const _this: EngineAPI.IApp = this;\r\n\r\n  return await getBookmarkMeta(bookmarkId, state, _this).then((b) => {\r\n    return b.setAnalysisDestructed;\r\n  });\r\n}\r\n\r\nexport async function mCloneBookmark(\r\n  sourceBookmarkId: string,\r\n  title: string,\r\n  description?: string,\r\n  state?: string\r\n): Promise<string> {\r\n  if (!sourceBookmarkId)\r\n    throw new Error(`mCloneBookmark: \"sourceBookmarkId\" parameter is required`);\r\n  if (!title) throw new Error(`mCloneBookmark: \"title\" parameter is required`);\r\n\r\n  state = state ? state : \"$\";\r\n  const _this: EngineAPI.IApp = this;\r\n\r\n  const sourceBookmarkMeta = await getBookmarkMeta(\r\n    sourceBookmarkId,\r\n    state,\r\n    _this\r\n  );\r\n\r\n  return await createBookmarkFromMeta(\r\n    _this,\r\n    sourceBookmarkMeta,\r\n    title,\r\n    description ? description : \"\"\r\n  );\r\n}\r\n\r\nexport async function getBookmarkMeta(\r\n  bookmarkId: string,\r\n  state: string,\r\n  qDoc: EngineAPI.IApp\r\n) {\r\n  const bookmark = await qDoc.getBookmark(bookmarkId);\r\n\r\n  const [properties, layout, setAnalysisRaw] = await Promise.all([\r\n    await bookmark.getProperties(),\r\n    await bookmark.getLayout(),\r\n    await qDoc.getSetAnalysis(state, bookmarkId),\r\n  ]);\r\n\r\n  const setAnalysisDestructed = destructSetAnalysis(setAnalysisRaw);\r\n\r\n  return {\r\n    properties,\r\n    layout,\r\n    setAnalysisRaw,\r\n    setAnalysisDestructed,\r\n  };\r\n}\r\n\r\nasync function createBookmarkFromMeta(\r\n  qApp: EngineAPI.IApp,\r\n  bookmarkMeta: IMBookmarkMeta,\r\n  title: string,\r\n  description?: string\r\n) {\r\n  await qApp.clearAll(true);\r\n\r\n  const makeSelections = await Promise.all(\r\n    bookmarkMeta.setAnalysisDestructed.map(async (s) => {\r\n      if (s.type == \"list\") return await selectListValues(qApp, s);\r\n      if (s.type == \"expression\") return await selectExpressionValues(qApp, s);\r\n    })\r\n  );\r\n\r\n  if (!makeSelections.every((v) => v === true)) {\r\n    throw new Error(`Failed to make selection`);\r\n  }\r\n\r\n  const bookmarkProps: EngineAPI.IGenericBookmarkProperties = {\r\n    qInfo: {\r\n      qType: \"bookmark\",\r\n    },\r\n    qMetaDef: {\r\n      title: title,\r\n      description: description,\r\n    },\r\n  };\r\n\r\n  const newBookmark = await qApp.createBookmark(bookmarkProps);\r\n  const newBookmarkProps = await newBookmark.getProperties();\r\n\r\n  return newBookmarkProps.qInfo.qId;\r\n}\r\n\r\nfunction destructSetAnalysis(setAnalysisRaw: string): {\r\n  field: string;\r\n  values: string | EngineAPI.IFieldValue;\r\n  type: string;\r\n}[] {\r\n  // remove \"<\" and \">\" from the start and the end of the string\r\n  setAnalysisRaw = /\\<(.*?)\\>/g.exec(setAnalysisRaw)[1];\r\n\r\n  // split by \"},\" but keeping the separator in the result string\r\n  const regexSplit = /(?<=\\},)/;\r\n\r\n  return setAnalysisRaw.split(regexSplit).map((s) => {\r\n    // remove the \",\" character from the end (if exists)\r\n    s = s.replace(/,\\s*$/, \"\");\r\n\r\n    // get the value between { and }\r\n    const regexValues = /\\{(.*?)\\}/;\r\n    const valueRaw = `${regexValues.exec(s)[1]}`;\r\n\r\n    let type: string = \"\";\r\n    let values: string | EngineAPI.IFieldValue;\r\n\r\n    // option 1 (general case): if the value is expression (starts with `\"` and ends with double quote)\r\n    const regexExpression = /\\\"(.*?)\\\"/;\r\n    // option 2: if the value is expression (starts with `\"=` and ends with double quote)\r\n    const regexExpression1 = /\\\"=(.*?)\\\"/;\r\n\r\n    // if the value is expression\r\n    if (regexExpression.test(valueRaw)) {\r\n      type = \"expression\";\r\n      //if starts with `\"=` add \"=\" after the regex\r\n      // else keep it as it is\r\n      if (regexExpression1.test(valueRaw)) {\r\n        values = `=${regexExpression1.exec(valueRaw)[1]}`;\r\n      } else {\r\n        values = `${regexExpression.exec(valueRaw)[1]}`;\r\n      }\r\n    }\r\n\r\n    // if the value is list of values\r\n    if (!regexExpression.test(valueRaw)) {\r\n      type = \"list\";\r\n\r\n      let temp = valueRaw.replace(/','/g, '\",\"');\r\n      temp = `[\"${temp.substring(1, temp.length - 1)}\"]`;\r\n      let rawValues = JSON.parse(temp);\r\n\r\n      // determine the value based on the type - string or number\r\n      // fields are different based on the value type\r\n      values = rawValues.map((v: any) => {\r\n        if (typeof v == \"number\")\r\n          return {\r\n            qIsNumeric: true,\r\n            qNumber: v,\r\n          };\r\n\r\n        if (typeof v == \"string\")\r\n          return {\r\n            qIsNumeric: false,\r\n            qText: v,\r\n          };\r\n      });\r\n    }\r\n\r\n    // extract the field from the expression\r\n    // first string before ={\r\n    let regexField = /(.*?)\\={/;\r\n    let field = regexField.exec(s)[1];\r\n\r\n    return {\r\n      field,\r\n      values,\r\n      type,\r\n    };\r\n  });\r\n}\r\n\r\nasync function selectListValues(\r\n  qApp: EngineAPI.IApp,\r\n  s: ISetAnalysisDestructed\r\n): Promise<boolean> {\r\n  const qField = await qApp.getField(s.field);\r\n  return await qField.selectValues(s.values as EngineAPI.IFieldValue[]);\r\n}\r\n\r\nasync function selectExpressionValues(qApp: EngineAPI.IApp, s) {\r\n  const listObjectDef = {\r\n    qInfo: {\r\n      qType: \"bookmark-creation-temp\",\r\n    },\r\n    qListObjectDef: {\r\n      qDef: {\r\n        qFieldDefs: [s.field],\r\n      },\r\n    },\r\n  };\r\n\r\n  const listObject = await qApp.createSessionObject(listObjectDef);\r\n\r\n  const search = await listObject.searchListObjectFor(\r\n    \"/qListObjectDef\",\r\n    s.values\r\n  );\r\n\r\n  const makeSelection = await listObject.acceptListObjectSearch(\r\n    \"/qListObjectDef\",\r\n    false\r\n  );\r\n\r\n  await qApp.destroySessionObject(listObject.id);\r\n\r\n  return typeof makeSelection === \"object\" &&\r\n    Object.keys(makeSelection).length === 0\r\n    ? true\r\n    : false;\r\n}\r\n","import { INxAppProperties } from \"../../index.doc\";\r\nimport { getBookmarkMeta } from \"./bookmarks\";\r\n\r\ntype TSections =\r\n  | \"variables\"\r\n  | \"script\"\r\n  | \"appProperties\"\r\n  | \"connections\"\r\n  | \"bookmarks\"\r\n  | \"measures\"\r\n  | \"dimensions\"\r\n  | \"objects\";\r\n\r\nexport async function mUnbuild(sections?: TSections[]) {\r\n  const _this: EngineAPI.IApp = this;\r\n  sections ? sections : [];\r\n\r\n  return await Promise.all([\r\n    await unbuildVariables(\r\n      _this,\r\n      sections ? sections.includes(\"variables\") : true\r\n    ),\r\n    await unbuildScript(_this, sections ? sections.includes(\"script\") : true),\r\n    await unbuildAppProperties(\r\n      _this,\r\n      sections ? sections.includes(\"appProperties\") : true\r\n    ),\r\n    await unbuildConnections(\r\n      _this,\r\n      sections ? sections.includes(\"connections\") : true\r\n    ),\r\n    await unbuildEntities(\r\n      _this,\r\n      sections\r\n        ? sections.includes(\"dimensions\") ||\r\n            sections.includes(\"objects\") ||\r\n            sections.includes(\"measures\")\r\n        : true,\r\n      sections\r\n    ),\r\n    await unbuildBookmarks(\r\n      _this,\r\n      sections ? sections.includes(\"bookmarks\") : true\r\n    ),\r\n  ])\r\n    .then((data) => ({\r\n      variables: data[0],\r\n      script: data[1],\r\n      appProperties: data[2],\r\n      connections: data[3],\r\n      dimensions: data[4].dimensions ? data[4].dimensions : [],\r\n      measures: data[4].measures ? data[4].measures : [],\r\n      objects: data[4].objects ? data[4].objects : [],\r\n      bookmarks: data[5],\r\n    }))\r\n    .then((data) => {\r\n      if (!sections) return data;\r\n\r\n      const sectionsDistinct = new Set(sections);\r\n\r\n      return Object.fromEntries(\r\n        Object.entries(data).filter(([key]) =>\r\n          Array.from(sectionsDistinct).includes(key as any)\r\n        )\r\n      );\r\n    });\r\n}\r\n\r\nasync function unbuildVariables(\r\n  app: EngineAPI.IApp,\r\n  unBuild: boolean\r\n): Promise<EngineAPI.IGenericVariableProperties[]> {\r\n  if (unBuild) {\r\n    const objProp: EngineAPI.IGenericVariableListProperties = {\r\n      qInfo: {\r\n        qType: \"VariableList\",\r\n      },\r\n      qVariableListDef: {\r\n        qData: {},\r\n        qType: \"variable\",\r\n        qShowReserved: false,\r\n        qShowConfig: false,\r\n      },\r\n    };\r\n\r\n    const sessionObj = await app.createSessionObject(objProp);\r\n\r\n    const sessionObjLayout = await sessionObj.getLayout();\r\n\r\n    await app.destroySessionObject(sessionObj.id);\r\n\r\n    return await Promise.all(\r\n      (sessionObjLayout as any).qVariableList.qItems.map(\r\n        async (variable: EngineAPI.IGenericVariableListProperties) => {\r\n          const qVariable = await app.getVariableById(variable.qInfo.qId);\r\n          return await qVariable.getProperties();\r\n        }\r\n      )\r\n    );\r\n  }\r\n}\r\n\r\nasync function unbuildScript(app: EngineAPI.IApp, unBuild: boolean) {\r\n  if (unBuild) {\r\n    const script = await app.getScript();\r\n\r\n    // return script.replace(/\\r\\n/g, \"\");\r\n    return script;\r\n  }\r\n\r\n  return \"\";\r\n}\r\n\r\nasync function unbuildAppProperties(app: EngineAPI.IApp, unBuild: boolean) {\r\n  let appProperties = {} as INxAppProperties;\r\n\r\n  if (unBuild) {\r\n    appProperties = await app.getAppProperties();\r\n  }\r\n  return appProperties;\r\n}\r\n\r\nasync function unbuildConnections(app: EngineAPI.IApp, unBuild: boolean) {\r\n  if (unBuild) {\r\n    const appConnections = await app.getConnections();\r\n\r\n    return appConnections;\r\n  }\r\n}\r\n\r\nasync function unbuildEntities(\r\n  app: EngineAPI.IApp,\r\n  unBuild: boolean,\r\n  sections: TSections[]\r\n) {\r\n  const data: {\r\n    dimensions: EngineAPI.IGenericDimensionProperties[];\r\n    measures: EngineAPI.IGenericMeasureProperties[];\r\n    objects: (\r\n      | EngineAPI.IGenericObjectEntry\r\n      | EngineAPI.IGenericObjectProperties\r\n    )[];\r\n  } = {\r\n    dimensions: [],\r\n    measures: [],\r\n    objects: [],\r\n  };\r\n\r\n  if (unBuild) {\r\n    // get list of all objects\r\n    const appAllInfos = await app.getAllInfos();\r\n\r\n    return Promise.all(\r\n      appAllInfos.map(async function (item) {\r\n        // try {\r\n        if (item.qType == \"dimension\") {\r\n          if (!sections || sections.includes(\"dimensions\")) {\r\n            const dim = await app.getDimension(item.qId);\r\n            const dimProp = await dim.getProperties();\r\n            data.dimensions.push(dimProp);\r\n          }\r\n        }\r\n\r\n        if (item.qType == \"measure\") {\r\n          if (!sections || sections.includes(\"measures\")) {\r\n            const measure = await app.getMeasure(item.qId);\r\n            const measureProp = await measure.getProperties();\r\n            data.measures.push(measureProp);\r\n          }\r\n        }\r\n\r\n        if (\r\n          item.qType != \"dimension\" &&\r\n          item.qType != \"measure\" &&\r\n          item.qType.indexOf(\"snapshot\") == -1 &&\r\n          item.qType != \"bookmark\" &&\r\n          item.qType != \"appprops\"\r\n        ) {\r\n          if (!sections || sections.includes(\"objects\")) {\r\n            const o = await processObject(item, app);\r\n\r\n            data.objects.push(o);\r\n          }\r\n        }\r\n      })\r\n    ).then(() => data);\r\n  }\r\n\r\n  return data;\r\n}\r\n\r\nasync function unbuildBookmarks(app: EngineAPI.IApp, unBuild: boolean) {\r\n  if (unBuild) {\r\n    const listObj: EngineAPI.IGenericBookmarkListProperties = {\r\n      qInfo: {\r\n        qId: \"BookmarkList\",\r\n        qType: \"BookmarkList\",\r\n      },\r\n      qBookmarkListDef: {\r\n        qType: \"bookmark\",\r\n        qData: {\r\n          // dynamic data stored by the Qlik Sense client\r\n          title: \"/qMetaDef/title\",\r\n          description: \"/qMetaDef/description\",\r\n          sheetId: \"/sheetId\",\r\n          selectionFields: \"/selectionFields\",\r\n          creationDate: \"/creationDate\",\r\n        },\r\n      },\r\n    };\r\n\r\n    const sessionObject = await app.createSessionObject(listObj);\r\n    const sessionObjectLayout = await sessionObject.getLayout();\r\n    const bookmarks = sessionObjectLayout.qBookmarkList.qItems;\r\n\r\n    await app.destroySessionObject(sessionObject.id);\r\n\r\n    return await Promise.all(\r\n      bookmarks.map(async (bookmark) => {\r\n        return await getBookmarkMeta(bookmark.qInfo.qId, \"$\", app);\r\n      })\r\n    );\r\n  }\r\n}\r\n\r\nasync function processObject(item, app: EngineAPI.IApp) {\r\n  const obj = await app.getObject(item.qId);\r\n\r\n  // embeddedsnapshot, snapshot, hiddenbookmark, story --> need to be handled differently\r\n  const parent = await (obj as any)\r\n    .getParent()\r\n    .then(() => true)\r\n    .catch(() => false);\r\n  const children = await obj.getChildInfos();\r\n\r\n  // parent-less objects - masterobject, sheet, appprops, LoadModel\r\n  if (!parent && children.length > 0) return await obj.getFullPropertyTree();\r\n\r\n  const prop = await obj.getProperties();\r\n\r\n  return prop;\r\n}\r\n","// TODO: ...\r\n//  * appProperties - where the icon?\r\n//  * appProperties - theme is different from the source app?\r\n//  * connections   - created, but why not visible?\r\n//  * purge         - option to remove everything from the app before\r\n//                    build is started\r\n\r\nexport async function mBuild(arg: {\r\n  variables?: EngineAPI.IGenericVariableProperties[];\r\n  script?: string;\r\n  appProperties?: EngineAPI.INxAppProperties;\r\n  connections?: EngineAPI.IConnection[];\r\n  measures?: EngineAPI.IGenericMeasureProperties[];\r\n  dimensions?: EngineAPI.IGenericDimensionProperties[];\r\n  objects?: (\r\n    | EngineAPI.IGenericObjectEntry\r\n    | EngineAPI.IGenericObjectProperties\r\n  )[];\r\n  bookmarks?: {\r\n    properties: EngineAPI.IGenericBookmarkProperties;\r\n    layout: EngineAPI.IGenericBookmarkLayout;\r\n    setAnalysisRaw: string;\r\n    setAnalysisDestructed: {\r\n      field: string;\r\n      values: string | EngineAPI.IFieldValue;\r\n      type: string;\r\n    }[];\r\n  }[];\r\n}) {\r\n  return Promise.all([\r\n    await processMeasures(arg.measures, this),\r\n    await processDimensions(arg.dimensions, this),\r\n    await processScript(arg.script, this),\r\n    await processAppProperties(arg.appProperties, this),\r\n    await processConnections(arg.connections, this),\r\n    await processVariables(arg.variables, this),\r\n    await processObjects(arg.objects, this),\r\n  ])\r\n    .then(function (d) {\r\n      return {\r\n        measures: d[0],\r\n        dimensions: d[1],\r\n        script: d[2],\r\n        appProperties: d[3],\r\n        connections: d[4],\r\n        variables: d[5],\r\n        objects: d[6],\r\n      };\r\n    })\r\n    .then((data) => {\r\n      const notNullKeys = Object.keys(data).filter((k) => {\r\n        return data[k] != undefined;\r\n      });\r\n\r\n      return Object.fromEntries(\r\n        Object.entries(data).filter(([key]) =>\r\n          Array.from(notNullKeys).includes(key as any)\r\n        )\r\n      );\r\n    });\r\n}\r\n\r\nasync function processMeasures(\r\n  measures: EngineAPI.IGenericMeasureProperties[],\r\n  app: EngineAPI.IApp\r\n) {\r\n  if (measures) {\r\n    return Promise.all(\r\n      measures.map(async function (measure) {\r\n        let obj = {} as EngineAPI.IGenericMeasure;\r\n\r\n        // the measure do not exists and need to be created\r\n        try {\r\n          obj = await app.getMeasure(measure.qInfo.qId);\r\n        } catch (e) {}\r\n\r\n        if (!obj.id) {\r\n          const created = await app.createMeasure(measure);\r\n\r\n          return { qId: measure.qInfo.qId, status: \"Created\" };\r\n        }\r\n\r\n        // the measure exists and need to be updated\r\n        const updated = await obj.setProperties(measure);\r\n\r\n        return { qId: measure.qInfo.qId, status: \"Updated\" };\r\n      })\r\n    );\r\n  }\r\n}\r\n\r\nasync function processDimensions(\r\n  dimensions: EngineAPI.IGenericDimensionProperties[],\r\n  app: EngineAPI.IApp\r\n) {\r\n  if (dimensions) {\r\n    return Promise.all(\r\n      dimensions.map(async function (dimension) {\r\n        let obj = {} as EngineAPI.IGenericDimension;\r\n\r\n        try {\r\n          obj = await app.getDimension(dimension.qInfo.qId);\r\n        } catch (e) {}\r\n\r\n        // the dimension do not exists and need to be created\r\n        if (!(obj as any).id) {\r\n          const created = await app.createDimension(dimension);\r\n\r\n          return { qId: dimension.qInfo.qId, status: \"Created\" };\r\n        }\r\n\r\n        // the dimension exists and need to be updated\r\n        const updated = await (obj as any).setProperties(dimension);\r\n\r\n        return { qId: dimension.qInfo.qId, status: \"Updated\" };\r\n      })\r\n    );\r\n  }\r\n}\r\n\r\nasync function processScript(script: string, app: EngineAPI.IApp) {\r\n  if (script) {\r\n    const s = await app.setScript(script);\r\n\r\n    return { status: \"Set\" };\r\n  }\r\n}\r\n\r\nasync function processAppProperties(\r\n  appProperties: EngineAPI.INxAppProperties,\r\n  app: EngineAPI.IApp\r\n) {\r\n  if (appProperties) {\r\n    const update = await app.setAppProperties(appProperties);\r\n\r\n    return { status: \"Set\" };\r\n  }\r\n}\r\n\r\nasync function processConnections(\r\n  connections: EngineAPI.IConnection[],\r\n  app: EngineAPI.IApp\r\n) {\r\n  if (connections) {\r\n    const appConnections = await app.getConnections();\r\n\r\n    return Promise.all(\r\n      connections.map(async function (connection) {\r\n        const conn = appConnections.find((o) => o.qName === connection.qName);\r\n\r\n        if (!conn) {\r\n          const create = await app.createConnection(connection);\r\n\r\n          return { qId: connection.qName, status: \"Created\" };\r\n        }\r\n\r\n        const modify = await app.modifyConnection(conn.qId, connection, true);\r\n\r\n        return { qId: connection.qName, status: \"Updated\" };\r\n      })\r\n    );\r\n  }\r\n}\r\n\r\nasync function processVariables(\r\n  variables: EngineAPI.IGenericVariableProperties[],\r\n  app: EngineAPI.IApp\r\n) {\r\n  if (variables) {\r\n    return Promise.all(\r\n      variables.map(async function (variable) {\r\n        let qVar: EngineAPI.IGenericVariable;\r\n        try {\r\n          qVar = await app.getVariableByName(variable.qName);\r\n        } catch (e) {}\r\n\r\n        if (!qVar || !qVar.id) {\r\n          const created = await app.createVariableEx(variable);\r\n\r\n          return { qId: variable.qName, status: \"Created\" };\r\n        }\r\n\r\n        const updated = await qVar.setProperties(variable);\r\n\r\n        return { qId: variable.qName, status: \"Updated\" };\r\n      })\r\n    );\r\n  }\r\n}\r\n\r\nasync function processObjects(\r\n  objects: (\r\n    | EngineAPI.IGenericObjectEntry\r\n    | EngineAPI.IGenericObjectProperties\r\n  )[],\r\n  app: EngineAPI.IApp\r\n) {\r\n  if (objects) {\r\n    return Promise.all(\r\n      objects.map(async function (object) {\r\n        let objId: string, objType: string;\r\n        let isGenericObject = false;\r\n\r\n        //if the object is GenericObject - the id and the type are in a slightly different path\r\n        if (!(object as EngineAPI.IGenericObjectProperties).qInfo) {\r\n          isGenericObject = true;\r\n          objId = object.qProperty.qInfo.qId;\r\n          objType = object.qProperty.qInfo.qType;\r\n        } else {\r\n          objId = (object as EngineAPI.IGenericObjectProperties).qInfo.qId;\r\n          objType = (object as EngineAPI.IGenericObjectProperties).qInfo.qType;\r\n        }\r\n\r\n        let obj: EngineAPI.IGenericObject;\r\n\r\n        try {\r\n          obj = await app.getObject(objId);\r\n        } catch (e) {}\r\n\r\n        if (obj && obj.id) {\r\n          // if its GenericObject we have to set the the props using setFullPropertyTree\r\n          if (isGenericObject) {\r\n            const updated = obj.setFullPropertyTree(\r\n              object as EngineAPI.IGenericObjectEntry\r\n            );\r\n\r\n            return { qId: objId, status: \"Updated\" };\r\n          }\r\n\r\n          // if not GenericObject then use the \"usual\" setProperties\r\n          if (!isGenericObject) {\r\n            const updated = await obj.setProperties(\r\n              object as EngineAPI.IGenericObjectProperties\r\n            );\r\n\r\n            return { qId: objId, status: \"Updated\" };\r\n          }\r\n        }\r\n\r\n        // same rules are applied when we have to create the object\r\n        if (!obj || !obj.id) {\r\n          if (isGenericObject) {\r\n            const o = await app.createObject({\r\n              qInfo: {\r\n                qId: `${objId}`,\r\n                qType: objType,\r\n              },\r\n            });\r\n\r\n            const updated = await o.setFullPropertyTree(\r\n              object as EngineAPI.IGenericObjectEntry\r\n            );\r\n\r\n            return { qId: objId, status: \"Created\" };\r\n          }\r\n\r\n          if (!isGenericObject) {\r\n            const created = await app.createObject(\r\n              object as EngineAPI.IGenericObjectProperties\r\n            );\r\n\r\n            return { qId: objId, status: \"Created\" };\r\n          }\r\n        }\r\n      })\r\n    );\r\n  }\r\n}\r\n","import {\r\n  mVariableCreate,\r\n  mVariableGetAll,\r\n  mVariableUpdateById,\r\n  mVariableUpdateByName,\r\n} from \"./mixins/doc/qVariables\";\r\nimport {\r\n  mCreateSessionListbox,\r\n  mGetFields,\r\n  mGetTables,\r\n  mGetTablesAndFields,\r\n} from \"./mixins/doc/qTablesAndFields\";\r\nimport {\r\n  mSelectInField,\r\n  mSelectionsAll,\r\n  mSelectionsFields,\r\n  mSelectionsSimple,\r\n  mSelectionsSimpleGrouped,\r\n} from \"./mixins/doc/qSelections\";\r\nimport { mExtensionObjectsAll } from \"./mixins/doc/extension-objects\";\r\nimport {\r\n  mCloneBookmark,\r\n  mCreateBookmarkFromMeta,\r\n  mGetBookmarkMeta,\r\n  mGetBookmarkValues,\r\n  mGetBookmarksMeta,\r\n} from \"./mixins/doc/bookmarks\";\r\n\r\nimport { mUnbuild } from \"./mixins/doc/unbuild\";\r\nimport { mBuild } from \"./mixins/doc/build\";\r\n\r\ndeclare global {\r\n  module EngineAPI {\r\n    export interface IApp {\r\n      mUnbuild(\r\n        sections?: (\r\n          | \"variables\"\r\n          | \"script\"\r\n          | \"appProperties\"\r\n          | \"connections\"\r\n          | \"measures\"\r\n          | \"dimensions\"\r\n          | \"objects\"\r\n          | \"bookmarks\"\r\n        )[]\r\n      ): Promise<IUnbuildApp>;\r\n      mBuild(arg: {\r\n        variables?: EngineAPI.IGenericVariableProperties[];\r\n        script?: string;\r\n        appProperties?: EngineAPI.INxAppProperties;\r\n        connections?: EngineAPI.IConnection[];\r\n        measures?: EngineAPI.IGenericMeasureProperties[];\r\n        dimensions?: EngineAPI.IGenericDimensionProperties[];\r\n        objects?: (\r\n          | EngineAPI.IGenericObjectEntry\r\n          | EngineAPI.IGenericObjectProperties\r\n        )[];\r\n        bookmarks?: {\r\n          properties: EngineAPI.IGenericBookmarkProperties;\r\n          layout: EngineAPI.IGenericBookmarkLayout;\r\n          setAnalysisRaw: string;\r\n          setAnalysisDestructed: {\r\n            field: string;\r\n            values: string | EngineAPI.IFieldValue;\r\n            type: string;\r\n          }[];\r\n        }[];\r\n      }): Promise<IUnbuildApp>;\r\n      mVariableGetAll(\r\n        showSession?: boolean,\r\n        showReserved?: boolean\r\n      ): Promise<EngineAPI.INxVariableListItem[]>;\r\n      mVariableUpdateById(\r\n        id: string,\r\n        name?: string,\r\n        definition?: string,\r\n        comment?: string\r\n      ): Promise<EngineAPI.IGenericVariableProperties>;\r\n      mVariableUpdateByName(\r\n        name: string,\r\n        newName: string,\r\n        definition?: string,\r\n        comment?: string\r\n      ): Promise<EngineAPI.IGenericVariableProperties>;\r\n      mVariableCreate(\r\n        name: string,\r\n        definition?: string,\r\n        comment?: string\r\n      ): Promise<EngineAPI.IGenericVariableProperties>;\r\n      mCreateSessionListbox(\r\n        fieldName: string,\r\n        state?: string,\r\n        type?: string\r\n      ): Promise<{\r\n        obj: EngineAPI.IGenericObject;\r\n        layout: EngineAPI.IGenericBaseLayout;\r\n        props: EngineAPI.IGenericObjectProperties;\r\n      }>;\r\n      mGetTables(): Promise<string[]>;\r\n      mGetTablesAndFields(): Promise<{ table: string; field: string }[]>;\r\n      mGetFields(): Promise<string[]>;\r\n      mSelectionsAll(): Promise<EngineAPI.ISelectionListObject>;\r\n      mSelectionsSimple(): Promise<{ field: string; values: string[] }[]>;\r\n      mSelectionsSimpleGrouped(): Promise<{ field: string; value: string }[]>;\r\n      mSelectionsFields(): Promise<string[]>;\r\n      mSelectInField(\r\n        fieldName: string,\r\n        values: any[],\r\n        toggle?: boolean,\r\n        state?: string\r\n      ): Promise<boolean>;\r\n      mExtensionObjectsAll(): Promise<IExtension[]>;\r\n      mGetBookmarkMeta(\r\n        bookmarkId: string,\r\n        state?: string\r\n      ): Promise<IMBookmarkMeta>;\r\n      mGetBookmarksMeta(state?: string): Promise<IMBookmarkMeta[]>;\r\n      mCreateBookmarkFromMeta(\r\n        bookmarkMeta: IMBookmarkMeta,\r\n        title: string,\r\n        description?: string\r\n      ): Promise<string>;\r\n      mGetBookmarkValues(\r\n        bookmarkId: string,\r\n        state?: string\r\n      ): Promise<IBookmarkValue[]>;\r\n      mCloneBookmark(\r\n        sourceBookmarkId: string,\r\n        title: string,\r\n        description?: string,\r\n        state?: string\r\n      ): Promise<string>;\r\n      getSetAnalysis(\r\n        qStateName?: string,\r\n        qBookmarkId?: string\r\n      ): Promise<string>;\r\n    }\r\n  }\r\n}\r\n\r\nexport interface ISetAnalysisDestructed {\r\n  field: string;\r\n  type: string;\r\n  values: string | EngineAPI.IFieldValue;\r\n}\r\n\r\nexport interface IExtension {\r\n  appId: string;\r\n  appName: string;\r\n  objId: string;\r\n  objType: string;\r\n  extName: any;\r\n  extVersion: any;\r\n  extVisible: any;\r\n  extIsBundle: boolean;\r\n  extIsLibrary: any;\r\n  qProps: EngineAPI.IGenericObjectProperties;\r\n}\r\n\r\nexport interface IBookmarkValue {\r\n  field: string;\r\n  values: string | EngineAPI.IFieldValue;\r\n  type: string;\r\n}\r\n\r\nexport interface IMBookmarkMeta {\r\n  properties: EngineAPI.IGenericBookmarkProperties;\r\n  layout: EngineAPI.IGenericBookmarkLayout;\r\n  setAnalysisRaw: string;\r\n  setAnalysisDestructed: ISetAnalysisDestructed[];\r\n}\r\n\r\nexport interface IUnbuildApp {\r\n  variables: EngineAPI.INxVariableListItem[];\r\n  script: string;\r\n  appProperties: EngineAPI.INxAppProperties;\r\n  connections: EngineAPI.IConnection[];\r\n  dimensions: EngineAPI.IGenericDimensionProperties[];\r\n  measures: EngineAPI.IGenericMeasureProperties[];\r\n  objects: (\r\n    | EngineAPI.IGenericObjectEntry\r\n    | EngineAPI.IGenericObjectProperties\r\n  )[];\r\n}\r\n\r\nexport const docMixin = [\r\n  {\r\n    types: [\"Doc\"],\r\n    init(args) {},\r\n    extend: {\r\n      mSelectInField,\r\n      mSelectionsAll,\r\n      mSelectionsFields,\r\n      mSelectionsSimple,\r\n      mSelectionsSimpleGrouped,\r\n      mVariableCreate,\r\n      mVariableGetAll,\r\n      mVariableUpdateById,\r\n      mVariableUpdateByName,\r\n      mCreateSessionListbox,\r\n      mGetFields,\r\n      mGetTables,\r\n      mGetTablesAndFields,\r\n      mExtensionObjectsAll,\r\n      mBuild,\r\n      mUnbuild,\r\n      mCloneBookmark,\r\n      mCreateBookmarkFromMeta,\r\n      mGetBookmarkMeta,\r\n      mGetBookmarkValues,\r\n      mGetBookmarksMeta,\r\n    },\r\n  },\r\n];\r\n"],"names":[],"mappings":"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"}