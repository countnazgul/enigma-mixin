{"version":3,"file":"enigma-mixin.min.js","sources":["../src/mixins/object-definitions.js","../src/mixins/qSelections.js","../src/mixins/extension-objects.js","../src/main.js","../src/mixins/qTablesAndFields.js","../src/mixins/qVariables.js"],"sourcesContent":["const sessionList = {\r\n    \"qInfo\": {\r\n        \"qId\": \"\",\r\n        \"qType\": \"SessionLists\"\r\n    },\r\n    \"qSelectionObjectDef\": {}\r\n}\r\n\r\nconst variableList = {\r\n    \"qInfo\": {\r\n        \"qType\": \"VariableList\"\r\n    },\r\n    \"qVariableListDef\": {\r\n        \"qType\": \"variable\"\r\n    }\r\n}\r\n\r\nconst listBox = {\r\n    \"qInfo\": {\r\n        \"qId\": \"\",\r\n        \"qType\": \"Combo\"\r\n    },\r\n    \"field\": {\r\n        \"qListObjectDef\": {\r\n            \"qStateName\": \"$\",\r\n            \"qDef\": {\r\n                \"qFieldDefs\": [],\r\n                \"qSortCriterias\": [{\r\n                    \"qSortByState\": 1,\r\n                    \"qExpression\": {}\r\n                }]\r\n            },\r\n            \"qInitialDataFetch\": [{\r\n                \"qTop\": 0,\r\n                \"qLeft\": 0,\r\n                \"qHeight\": 100,\r\n                \"qWidth\": 1\r\n            }]\r\n        }\r\n    }\r\n}\r\n\r\nmodule.exports = {\r\n    sessionList,\r\n    variableList,\r\n    listBox\r\n}","const objectDefinitions = require('./object-definitions.js')\r\n\r\nasync function iGetSelectionsNative(qDoc) {\r\n    try {\r\n        let sessionObj = await qDoc.createSessionObject(objectDefinitions.sessionList)\r\n        let selections = await sessionObj.getLayout()\r\n        return selections\r\n    } catch (e) {\r\n        throw new Error(e.message)\r\n    }\r\n\r\n}\r\n\r\nasync function mGetSelectionsCurrNative() {\r\n    try {\r\n        let selections = await iGetSelectionsNative(this)\r\n        return selections\r\n    } catch (e) {\r\n        throw new Error(e.message)\r\n    }\r\n}\r\n\r\n/**\r\n * Get current selections\r\n */\r\nasync function mGetSelectionsCurr() {\r\n    try {\r\n        let selections = await iGetSelectionsNative(this)\r\n\r\n        let fieldsSelected = selections.qSelectionObject.qSelections.map(function (s) {\r\n            return s.qField\r\n        })\r\n\r\n        return { selections: selections.qSelectionObject.qSelections, fields: fieldsSelected }\r\n    } catch (e) {\r\n        throw new Error(e.message)\r\n    }\r\n}\r\n\r\n/**\r\n * Select value(s) in a field\r\n * @param {string} fieldName - Name of the field\r\n * @param {array} values - String array with the values to be selected\r\n * @param {boolean} [toggle=false] toggle - How to apply the selection\r\n */\r\nasync function mSelectInField({ fieldName, values, toggle = false }) {\r\n\r\n    try {\r\n        let field = await this.getField(fieldName)\r\n\r\n        let valuesToSelect = values.map(function (v) {\r\n            return {\r\n                qText: v\r\n            }\r\n        })\r\n\r\n        try {\r\n            let selection = await field.selectValues({ qFieldValues: valuesToSelect, qToggleMode: toggle })\r\n            return selection\r\n        } catch (e) {\r\n            throw new Error(e.message)\r\n        }\r\n    } catch (e) {\r\n        throw new Error(e.message)\r\n    }\r\n}\r\n\r\nmodule.exports = {\r\n    mGetSelectionsCurr,\r\n    mGetSelectionsCurrNative,\r\n    mSelectInField\r\n}\r\n","const nonExtensionObjects = [\r\n    \"barchart\",\r\n    \"bookmark\",\r\n    \"combochart\",\r\n    \"dimension\",\r\n    \"embeddedsnapshot\",\r\n    \"filterpane\",\r\n    \"gauge\",\r\n    \"kpi\",\r\n    \"linechart\",\r\n    \"listbox\",\r\n    \"LoadModel\",\r\n    \"map\",\r\n    \"masterobject\",\r\n    \"measure\",\r\n    \"piechart\",\r\n    \"pivot-table\",\r\n    \"scatterplot\",\r\n    \"sheet\",\r\n    \"slide\",\r\n    \"slideitem\",\r\n    \"snapshot\",\r\n    \"story\",\r\n    \"StringExpression\",\r\n    \"table\",\r\n    \"treemap\"\r\n]\r\n\r\nasync function mGetAllExtensionObjects() {\r\n    let allInfos = await this.getAllInfos()\r\n    let extensionObjects = await filterOnlyExtensionObjects(this, allInfos)\r\n\r\n    return extensionObjects\r\n}\r\n\r\n\r\n\r\nasync function filterOnlyExtensionObjects(qDoc, allObjects) {\r\n    let possibleExtensionObjects = allObjects.filter(function (o) {\r\n        return nonExtensionObjects.indexOf(o.qType) == -1\r\n    })\r\n\r\n    let realExtensionObjects = []\r\n    if (possibleExtensionObjects.length > 0) {\r\n        for (let extObj of possibleExtensionObjects) {\r\n            let isReallyExtension = await realExtensionCheck(qDoc, extObj.qId)\r\n            if (isReallyExtension.isExtension) {\r\n                realExtensionObjects.push({\r\n                    appName: qDoc.id,\r\n                    objId: isReallyExtension.qObjProps.qInfo.qId,\r\n                    objType: isReallyExtension.qObjProps.qInfo.qType,\r\n                    extName: isReallyExtension.qObjProps.extensionMeta.name,\r\n                    extVersion: isReallyExtension.qObjProps.version,\r\n                    extVisible: isReallyExtension.qObjProps.extensionMeta.visible,\r\n                    extIsBundle: !isReallyExtension.qObjProps.extensionMeta.isThirdParty,\r\n                    extIsLibrary: isReallyExtension.qObjProps.extensionMeta.isLibraryItem,\r\n                    qProps: isReallyExtension.qObjProps\r\n                })\r\n            }\r\n        }\r\n\r\n        return realExtensionObjects\r\n    } else {\r\n        return []\r\n    }\r\n}\r\n\r\nconst realExtensionCheck = async function (qDoc, objId) {\r\n    let isExtension = false\r\n    let qObjProps = {}\r\n\r\n    try {\r\n        let qObj = await qDoc.getObject(objId)\r\n\r\n        qObjProps = await qObj.getProperties()\r\n\r\n        if (qObjProps.extensionMeta) {\r\n            isExtension = true\r\n        }\r\n\r\n    } catch (e) {\r\n        throw new Error(e.message)\r\n    }\r\n    return { qObjProps, isExtension }\r\n}\r\n\r\nmodule.exports = {\r\n    mGetAllExtensionObjects\r\n}","const qVariables = require('./mixins/qVariables.js')\r\nconst qSelections = require('./mixins/qSelections.js')\r\nconst qTablesAndFields = require('./mixins/qTablesAndFields.js')\r\nconst extensionObjects = require('./mixins/extension-objects.js')\r\n\r\nconst docMixin = {\r\n    types: ['Doc'],\r\n    init(args) {\r\n\r\n    },\r\n    extend: {\r\n        ...qSelections,\r\n        ...qTablesAndFields,\r\n        ...qVariables,\r\n        ...extensionObjects\r\n    },\r\n};\r\n\r\nmodule.exports = docMixin","const objectDefinitions = require('./object-definitions.js')\r\n\r\nasync function mGetTablesAndFields() {\r\n\r\n    try {\r\n        let tables = await this.getTablesAndKeys({}, {}, 0, true, false)\r\n\r\n        let f = [];\r\n\r\n        if (tables.qtr.length == 0) {\r\n            return f\r\n        } else {\r\n            for (let table of tables.qtr) {\r\n                for (let field of table.qFields) {\r\n                    f.push({ table: table.qName, field: field.qName })\r\n                }\r\n            }\r\n\r\n            return f\r\n        }\r\n    } catch (e) {\r\n        throw new Error(e.message)\r\n    }\r\n}\r\n\r\nasync function mGetTables() {\r\n    try {\r\n        let qTables = await this.getTablesAndKeys({}, {}, 0, true, false)\r\n\r\n        let tables = [];\r\n\r\n        if (qTables.length == 0) {\r\n            return tables\r\n        } else {\r\n            for (let table of qTables.qtr) {\r\n                tables.push(table.qName)\r\n            }\r\n\r\n            return tables\r\n        }\r\n    } catch (e) {\r\n        throw new Error(e.message)\r\n    }\r\n}\r\n\r\nasync function mGetFields() {\r\n    try {\r\n\r\n        let qTables = await this.getTablesAndKeys({}, {}, 0, true, false)\r\n\r\n        let fields = [];\r\n\r\n        for (let table of qTables.qtr) {\r\n            for (let field of table.qFields) {\r\n                fields.push(field.qName)\r\n            }\r\n        }\r\n\r\n        return fields\r\n    } catch (e) {\r\n        throw new Error(e.message)\r\n    }\r\n}\r\n\r\nasync function mGetListbox(fieldName) {\r\n\r\n    try {\r\n        let lbDef = objectDefinitions.listBox\r\n        lbDef.field.qListObjectDef.qDef.qFieldDefs.push(fieldName)\r\n        let sessionObj = await this.createSessionObject(lbDef)\r\n        let fieldValues = await sessionObj.getLayout()\r\n        return fieldValues.field.qListObject\r\n    } catch (e) {\r\n        throw new Error(e.message)\r\n    }\r\n\r\n}\r\n\r\nmodule.exports = {\r\n    mGetTablesAndFields,\r\n    mGetTables,\r\n    mGetFields,\r\n    mGetListbox\r\n} ","const objectDefinitions = require('./object-definitions.js');\r\n\r\nasync function mGetVariablesAll({ showSession = false, showConfig = false, showReserved = false } = {}) {\r\n    let objProp = objectDefinitions.variableList\r\n    objProp.qShowSession = showSession\r\n    objProp.qShowConfig = showConfig\r\n    objProp.qShowReserved = showReserved\r\n\r\n    try {\r\n        let sessionObj = await this.createSessionObject(objProp)\r\n        let sessionObjLayout = await sessionObj.getLayout()\r\n        return sessionObjLayout.qVariableList.qItems\r\n    } catch (e) {\r\n        throw new Error(e.message)\r\n    }\r\n}\r\n\r\nasync function mUpdateVariable(variable) {\r\n    try {\r\n        let variableContent = await this.getVariableById(variable.qInfo.qId)\r\n        let newContent = await variableContent.setProperties(variable)\r\n\r\n        return newContent\r\n    } catch (e) {\r\n        throw new Error(e.message)\r\n    }\r\n}\r\n\r\nasync function mCreateVariable({ name, comment = '', definition }) {\r\n\r\n    let varProps = {\r\n        \"qInfo\": {\r\n            \"qType\": \"variable\"\r\n        },\r\n        \"qName\": name,\r\n        \"qComment\": comment,\r\n        \"qDefinition\": definition\r\n    }\r\n\r\n    try {\r\n        let result = await this.createVariableEx(varProps)\r\n        return result\r\n    } catch (e) {\r\n        throw new Error(e.message)\r\n    }\r\n}\r\n\r\n\r\nmodule.exports = {\r\n    mGetVariablesAll,\r\n    mUpdateVariable,\r\n    mCreateVariable\r\n}\r\n"],"names":["sessionList","variableList","listBox","async","iGetSelectionsNative","qDoc","sessionObj","createSessionObject","objectDefinitions","getLayout","e","Error","message","nonExtensionObjects","realExtensionCheck","objId","isExtension","qObjProps","qObj","getObject","getProperties","extensionMeta","types","init","args","extend","mGetSelectionsCurr","selections","this","fieldsSelected","qSelectionObject","qSelections","map","s","qField","fields","mGetSelectionsCurrNative","mSelectInField","fieldName","values","toggle","field","getField","valuesToSelect","v","qText","selectValues","qFieldValues","qToggleMode","mGetTablesAndFields","tables","getTablesAndKeys","f","qtr","length","table","qFields","push","qName","mGetTables","qTables","mGetFields","mGetListbox","lbDef","qListObjectDef","qDef","qFieldDefs","qListObject","mGetVariablesAll","showSession","showConfig","showReserved","objProp","qShowSession","qShowConfig","qShowReserved","qVariableList","qItems","mUpdateVariable","variable","variableContent","getVariableById","qInfo","qId","setProperties","mCreateVariable","name","comment","definition","varProps","createVariableEx","mGetAllExtensionObjects","allInfos","getAllInfos","allObjects","possibleExtensionObjects","filter","o","indexOf","qType","realExtensionObjects","extObj","isReallyExtension","appName","id","objType","extName","extVersion","version","extVisible","visible","extIsBundle","isThirdParty","extIsLibrary","isLibraryItem","qProps","filterOnlyExtensionObjects"],"mappings":"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"}