{"version":3,"file":"enigma-mixin.min.js","sources":["../src/mixins/object-definitions.js","../src/main.js","../src/mixins/selections.js","../src/mixins/tables.js","../src/mixins/variables.js"],"sourcesContent":["const sessionList = {\r\n    \"qInfo\": {\r\n        \"qId\": \"\",\r\n        \"qType\": \"SessionLists\"\r\n    },\r\n    \"qSelectionObjectDef\": {}\r\n}\r\n\r\nconst variableList = {\r\n    \"qInfo\": {\r\n        \"qType\": \"VariableList\"\r\n    },\r\n    \"qVariableListDef\": {\r\n        \"qType\": \"variable\"\r\n    }\r\n}\r\n\r\nmodule.exports = {\r\n    sessionList,\r\n    variableList\r\n}","const qVariables = require('./mixins/variables.js')\r\nconst qSelections = require('./mixins/selections.js')\r\nconst qTablesAndFields = require('./mixins/tables.js')\r\n\r\nconst docMixin = {\r\n    types: ['Doc'],\r\n    init(args) {\r\n        const api = args;\r\n    },\r\n    extend: {\r\n        ...qSelections,\r\n        ...qTablesAndFields,\r\n        ...qVariables\r\n    },\r\n};\r\n\r\nmodule.exports = docMixin","const objectDefinitions = require('./object-definitions.js')\r\n\r\nasync function mGetCurrSelectionFields() {\r\n    let sessionObj = await this.createSessionObject(objectDefinitions.sessionList)\r\n    let selections = await sessionObj.getLayout()\r\n    return selections\r\n}\r\n\r\n/**\r\n * Get current selections\r\n */\r\nasync function mGetCurrentSelections() {\r\n\r\n    let selections = await getCurrSelectionFields()\r\n\r\n    let fieldsSelected = selections.qSelectionObject.qSelections.map(function (s) {\r\n        return s.qField\r\n    })\r\n\r\n    return { selections: selections.qSelectionObject.qSelections, fields: fieldsSelected }\r\n}\r\n\r\n/**\r\n * Select value(s) in a field\r\n * @param {string} fieldName - Name of the field\r\n * @param {array} values - String array with the values to be selected\r\n * @param {boolean} [toggle=false] toggle - How to apply the selection\r\n */\r\nasync function mSelectInField({ fieldName, values, toggle = false }) {\r\n    let field = await this.getField(fieldName)\r\n\r\n    let valuesToSelect = values.map(function (v) {\r\n        return {\r\n            qText: v\r\n        }\r\n    })\r\n\r\n    try {\r\n        let selection = await field.selectValues({ qFieldValues: valuesToSelect, qToggleMode: toggle })\r\n        return selection\r\n    } catch(e) {\r\n        console.log(e.message)\r\n        return false\r\n    }\r\n}\r\n\r\nmodule.exports = {\r\n    mGetCurrSelectionFields,\r\n    mSelectInField,\r\n    mGetCurrentSelections\r\n}\r\n","// async function getTablesAndKeys() {\r\n\r\n//     let tables = await _this.api.getTablesAndKeys({}, {}, 0, true, false)\r\n\r\n//     let f = [];\r\n\r\n//     for (let table of tables.qtr) {\r\n//         for (let field of table.qFields) {\r\n//             f.push({ table: table.qName, field: field.qName })\r\n//         }\r\n//     }\r\n\r\n//     return { tables: tables, fields: f }\r\n// }\r\n\r\nasync function mGetTablesAndFields() {\r\n    let tables = await this.getTablesAndKeys({}, {}, 0, true, false)\r\n\r\n    let f = [];\r\n\r\n    for (let table of tables.qtr) {\r\n        for (let field of table.qFields) {\r\n            f.push({ table: table.qName, field: field.qName })\r\n        }\r\n    }\r\n\r\n    return f\r\n}\r\n\r\nasync function mGetTables() {\r\n    let tables = await this.getTablesAndKeys({}, {}, 0, true, false)\r\n\r\n    let t = [];\r\n\r\n    for (let table of tables.qtr) {\r\n        t.push(table.qName)\r\n    }\r\n\r\n    return t\r\n}\r\n\r\nasync function mGetFields() {\r\n\r\n    let tables = await this.getTablesAndKeys({}, {}, 0, true, false)\r\n\r\n    let f = [];\r\n\r\n    for (let table of tables.qtr) {\r\n        for (let field of table.qFields) {\r\n            f.push(field.qName)\r\n        }\r\n    }\r\n\r\n    return f\r\n}\r\n\r\nmodule.exports = {\r\n    // getTablesAndKeys,\r\n    mGetTablesAndFields,\r\n    mGetTables,\r\n    mGetFields\r\n}","const objectDefinitions = require('./object-definitions.js');\r\n\r\nasync function mGetAllVariables({ showSession = false, showConfig = false, showReserved = false } = {}) {\r\n    let objProp = objectDefinitions.variableList\r\n    objProp.qShowSession = showSession\r\n    objProp.qShowConfig = showConfig\r\n    objProp.qShowReserved = showReserved\r\n\r\n    let sessionObj = await this.createSessionObject(objProp)\r\n    let sessionObjLayout = await sessionObj.getLayout()\r\n    return sessionObjLayout.qVariableList.qItems\r\n}\r\n\r\nasync function mUpdateVariable(variable) {\r\n    let variableContent = await this.getVariableById(variable.qInfo.qId)\r\n    let newContent = await variableContent.setProperties(variable)\r\n\r\n    return newContent\r\n}\r\n\r\nasync function mCreateVariable({ variableName, variableComment = '', variableDefinition }) {\r\n    let _this = this\r\n    let varProps = {\r\n        \"qInfo\": {\r\n            \"qType\": \"variable\"\r\n        },\r\n        \"qName\": variableName,\r\n        \"qComment\": variableComment,\r\n        \"qDefinition\": variableDefinition\r\n    }\r\n\r\n    let result = await _this.createVariableEx(varProps)\r\n\r\n    return result\r\n}\r\n\r\n\r\nmodule.exports = {\r\n    mGetAllVariables,\r\n    mUpdateVariable,\r\n    mCreateVariable\r\n}\r\n"],"names":["sessionList","variableList","types","init","args","extend","mGetCurrSelectionFields","async","sessionObj","this","createSessionObject","objectDefinitions","getLayout","mSelectInField","fieldName","values","toggle","field","getField","valuesToSelect","map","v","qText","selectValues","qFieldValues","qToggleMode","e","console","log","message","mGetCurrentSelections","selections","getCurrSelectionFields","fieldsSelected","qSelectionObject","qSelections","s","qField","fields","mGetTablesAndFields","tables","getTablesAndKeys","f","table","qtr","qFields","push","qName","mGetTables","t","mGetFields","mGetAllVariables","showSession","showConfig","showReserved","objProp","qShowSession","qShowConfig","qShowReserved","qVariableList","qItems","mUpdateVariable","variable","variableContent","getVariableById","qInfo","qId","setProperties","mCreateVariable","variableName","variableComment","variableDefinition","varProps","createVariableEx"],"mappings":"qMAiBA,MAAiB,CACbA,YAlBgB,OACP,KACE,SACE,oCAEU,IAcvBC,aAXiB,OACR,OACI,iCAEO,OACP,oBCTA,CACbC,MAAO,CAAC,OACRC,KAAKC,KAGLC,OAAQ,ICqCK,CACbC,wBA7CJC,qBACQC,QAAmBC,KAAKC,oBAAoBC,EAAkBX,0BAC3CQ,EAAWI,aA4ClCC,eApBJN,gBAA8BO,UAAEA,EAAFC,OAAaA,EAAbC,OAAqBA,GAAS,QACpDC,QAAcR,KAAKS,SAASJ,GAE5BK,EAAiBJ,EAAOK,IAAI,SAAUC,SAC/B,CACHC,MAAOD,sBAKWJ,EAAMM,aAAa,CAAEC,aAAcL,EAAgBM,YAAaT,IAExF,MAAMU,UACJC,QAAQC,IAAIF,EAAEG,UACP,IAOXC,sBAtCJvB,qBAEQwB,QAAmBC,yBAEnBC,EAAiBF,EAAWG,iBAAiBC,YAAYf,IAAI,SAAUgB,UAChEA,EAAEC,eAGN,CAAEN,WAAYA,EAAWG,iBAAiBC,YAAaG,OAAQL,QCqCzD,CAEbM,oBA3CJhC,qBACQiC,QAAe/B,KAAKgC,iBAAiB,GAAI,GAAI,GAAG,GAAM,GAEtDC,EAAI,OAEH,IAAIC,KAASH,EAAOI,QAChB,IAAI3B,KAAS0B,EAAME,QACpBH,EAAEI,KAAK,CAAEH,MAAOA,EAAMI,MAAO9B,MAAOA,EAAM8B,eAI3CL,GAiCPM,WA9BJzC,qBACQiC,QAAe/B,KAAKgC,iBAAiB,GAAI,GAAI,GAAG,GAAM,GAEtDQ,EAAI,OAEH,IAAIN,KAASH,EAAOI,IACrBK,EAAEH,KAAKH,EAAMI,cAGVE,GAsBPC,WAnBJ3C,qBAEQiC,QAAe/B,KAAKgC,iBAAiB,GAAI,GAAI,GAAG,GAAM,GAEtDC,EAAI,OAEH,IAAIC,KAASH,EAAOI,QAChB,IAAI3B,KAAS0B,EAAME,QACpBH,EAAEI,KAAK7B,EAAM8B,cAIdL,OChBM,CACbS,iBApCJ5C,gBAAgC6C,YAAEA,GAAc,EAAhBC,WAAuBA,GAAa,EAApCC,aAA2CA,GAAe,GAAU,QAC5FC,EAAU5C,EAAkBV,aAChCsD,EAAQC,aAAeJ,EACvBG,EAAQE,YAAcJ,EACtBE,EAAQG,cAAgBJ,MAEpB9C,QAAmBC,KAAKC,oBAAoB6C,gBACnB/C,EAAWI,aAChB+C,cAAcC,QA6BtCC,gBA1BJtD,eAA+BuD,OACvBC,QAAwBtD,KAAKuD,gBAAgBF,EAASG,MAAMC,kBACzCH,EAAgBI,cAAcL,IAyBrDM,gBApBJ7D,gBAA+B8D,aAAEA,EAAFC,gBAAgBA,EAAkB,GAAlCC,mBAAsCA,QAE7DC,EAAW,OACF,OACI,kBAEJH,WACGC,cACGC,gBAPP9D,KAUagE,iBAAiBD"}