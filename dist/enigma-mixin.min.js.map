{"version":3,"file":"enigma-mixin.min.js","sources":["../src/mixins/doc/object-definitions.js","../src/lib/helpers.js","../src/mixins/doc/qVariables.js","../src/mixins/doc/qSelections.js","../src/mixins/doc/qTablesAndFields.js","../src/mixins/doc/extension-objects.js","../src/mixins/doc/unbuild.js","../src/mixins/doc/build.js","../src/main.js"],"sourcesContent":["const sessionList = {\r\n    \"qInfo\": {\r\n        \"qId\": \"\",\r\n        \"qType\": \"SessionLists\"\r\n    },\r\n    \"qSelectionObjectDef\": {}\r\n}\r\n\r\nconst variableList = {\r\n    \"qInfo\": {\r\n        \"qType\": \"VariableList\"\r\n    },\r\n    \"qVariableListDef\": {\r\n        \"qType\": \"variable\"\r\n    }\r\n}\r\n\r\nconst listBox = {\r\n    \"qInfo\": {\r\n        \"qId\": \"\",\r\n        \"qType\": \"\"\r\n    },\r\n    \"field\": {\r\n        \"qListObjectDef\": {\r\n            \"qStateName\": \"$\",\r\n            \"qDef\": {\r\n                \"qFieldDefs\": [],\r\n                \"qSortCriterias\": [{\r\n                    \"qSortByState\": 1,\r\n                    \"qExpression\": {}\r\n                }]\r\n            },\r\n            \"qInitialDataFetch\": [{\r\n                \"qTop\": 0,\r\n                \"qLeft\": 0,\r\n                \"qHeight\": 10000,\r\n                \"qWidth\": 1\r\n            }]\r\n        }\r\n    }\r\n}\r\n\r\nmodule.exports = {\r\n    sessionList,\r\n    variableList,\r\n    listBox\r\n}","const handlePromise = (promise) => {\r\n    return promise\r\n        .then(data => ([data, undefined]))\r\n        .catch(error => Promise.resolve([undefined, error]));\r\n}\r\n\r\nmodule.exports = {\r\n    handlePromise\r\n}","const objectDefinitions = require('./object-definitions.js');\r\nconst { handlePromise } = require('../../lib/helpers');\r\n\r\nasync function mVariableGetAll(showSession = false, showConfig = false, showReserved = false) {\r\n    let objProp = objectDefinitions.variableList\r\n    objProp.qShowSession = showSession\r\n    objProp.qShowConfig = showConfig\r\n    objProp.qShowReserved = showReserved\r\n\r\n    let [sessionObj, sessionObjError] = await handlePromise(this.createSessionObject(objProp))\r\n    if (sessionObjError) throw new Error(sessionObjError.message)\r\n\r\n    let [layout, layoutError] = await handlePromise(sessionObj.getLayout())\r\n    if (layoutError) throw new Error(layoutError.message)\r\n\r\n    return layout.qVariableList.qItems\r\n}\r\n\r\nasync function mVariableUpdateById(id, definition, comment = undefined) {\r\n    let [variable, variableError] = await handlePromise(this.getVariableById(id))\r\n    if (variableError) throw new Error(variableError.message)\r\n\r\n    let [variableProps, variablePropsError] = await handlePromise(variable.getProperties())\r\n    if (variablePropsError) throw new Error(variablePropsError.message)\r\n\r\n    variableProps.qDefinition = definition\r\n    if (comment) variableProps.qComment = comment\r\n\r\n    let [setProps, setPropsError] = await handlePromise(variable.setProperties(variableProps))\r\n    if (setPropsError) throw new Error(setPropsError.message)\r\n\r\n    let [newProps, newPropsError] = await handlePromise(variable.getProperties())\r\n    if (newPropsError) throw new Error(newPropsError.message)\r\n\r\n    return newProps\r\n}\r\n\r\nasync function mVariableUpdateByName(name, definition, comment = undefined) {\r\n    let [variable, variableError] = await handlePromise(this.getVariableByName(name))\r\n    if (variableError) throw new Error(variableError.message)\r\n\r\n    let [variableProps, variablePropsError] = await handlePromise(variable.getProperties())\r\n    if (variablePropsError) throw new Error(variablePropsError.message)\r\n\r\n    variableProps.qDefinition = definition\r\n    if (comment) variableProps.qComment = comment\r\n\r\n    let [setProps, setPropsError] = await handlePromise(variable.setProperties(variableProps))\r\n    if (setPropsError) throw new Error(setPropsError.message)\r\n\r\n    let [newProps, newPropsError] = await handlePromise(variable.getProperties())\r\n    if (newPropsError) throw new Error(newPropsError.message)\r\n\r\n    return newProps\r\n}\r\n\r\nasync function mVariableCreate(name = '', definition = '', comment = '') {\r\n    let varProps = {\r\n        \"qInfo\": {\r\n            \"qType\": \"variable\"\r\n        },\r\n        \"qName\": name,\r\n        \"qDefinition\": definition,\r\n        \"qComment\": comment\r\n    }\r\n\r\n    let [created, createdError] = await handlePromise(this.createVariableEx(varProps))\r\n    if (createdError) throw new Error(createdError.message)\r\n\r\n    let [props, propsError] = await handlePromise(created.getProperties())\r\n    if (propsError) throw new Error(propsError.message)\r\n\r\n    return props\r\n}\r\n\r\nmodule.exports = {\r\n    mVariableGetAll,\r\n    mVariableUpdateById,\r\n    mVariableUpdateByName,\r\n    mVariableCreate\r\n}\r\n","const objectDefinitions = require('./object-definitions.js')\r\nconst { handlePromise } = require('../../lib/helpers');\r\n\r\nasync function iGetSelectionsNative(qDoc) {\r\n    let [sessionObj, sessionObjError] = await handlePromise(qDoc.createSessionObject(objectDefinitions.sessionList))\r\n    if (sessionObjError) throw new Error(sessionObjError.message)\r\n\r\n    let [selections, selectionsError] = await handlePromise(sessionObj.getLayout())\r\n    if (selectionsError) throw new Error(selectionsError.message)\r\n\r\n    let [destroy, destroyError] = await handlePromise(qDoc.destroySessionObject(sessionObj.id))\r\n    if (destroyError) throw new Error(destroyError.message)\r\n\r\n    return selections\r\n}\r\n\r\nasync function mSelectionsAll() {\r\n    let [selections, error] = await handlePromise(iGetSelectionsNative(this))\r\n    if (error) throw new Error(error.message)\r\n\r\n    return selections.qSelectionObject\r\n}\r\n\r\nasync function mSelectionsFields() {\r\n    let [selections, error] = await handlePromise(iGetSelectionsNative(this))\r\n    if (error) throw new Error(error.message)\r\n\r\n    let fieldsSelected = selections.qSelectionObject.qSelections.map(function (s) {\r\n        return s.qField\r\n    })\r\n\r\n    return fieldsSelected\r\n}\r\n\r\nasync function mSelectionsSimple(groupByField = false) {\r\n    let [selections, error] = await handlePromise(iGetSelectionsNative(this))\r\n    if (error) throw new Error(error.message)\r\n\r\n    if (!groupByField)\r\n        return selections.qSelectionObject.qSelections.map(function (s) {\r\n            return s.qSelectedFieldSelectionInfo.map(function (f) {\r\n                return { field: s.qField, value: f.qName }\r\n            })\r\n        }).flat()\r\n\r\n\r\n    return selections.qSelectionObject.qSelections.map(function (s) {\r\n        let values = s.qSelectedFieldSelectionInfo.map(function (f) {\r\n            return f.qName\r\n        })\r\n\r\n        return { field: s.qField, values }\r\n    })\r\n}\r\n\r\nasync function mSelectInField(fieldName, values, toggle = false) {\r\n    let lbDef = objectDefinitions.listBox\r\n    lbDef.field.qListObjectDef.qDef.qFieldDefs = [fieldName]\r\n    lbDef.qInfo.qType = \"session-listbox\"\r\n\r\n    let [sessionObj, sessionObjErr] = await handlePromise(this.createSessionObject(lbDef))\r\n    if (sessionObjErr) throw new Error(sessionObjErr.message)\r\n\r\n    let [layout, layoutError] = await handlePromise(sessionObj.getLayout())\r\n    if (layoutError) throw new Error(layoutError.message)\r\n\r\n    let index = layout.field.qListObject.qDataPages[0].qMatrix.filter(function (m) {\r\n        return values.indexOf(m[0].qText) > -1\r\n    }).map(function (e) {\r\n        return e[0].qElemNumber\r\n    })\r\n\r\n    let [selection, selectionError] = await handlePromise(sessionObj.selectListObjectValues('/field/qListObjectDef', index, toggle))\r\n    if (selectionError) throw new Error(selectionError.message)\r\n\r\n    let [destroy, destroyError] = await handlePromise(this.destroySessionObject(sessionObj.id))\r\n    if (destroyError) throw new Error(destroyError.message)\r\n\r\n    return selection\r\n}\r\n\r\nmodule.exports = {\r\n    mSelectionsAll,\r\n    mSelectionsFields,\r\n    mSelectionsSimple,\r\n    mSelectInField\r\n}\r\n","const objectDefinitions = require('./object-definitions.js')\r\nconst { handlePromise } = require('../../lib/helpers');\r\n\r\nasync function mGetTablesAndFields() {\r\n    let [tables, error] = await handlePromise(this.getTablesAndKeys({}, {}, 0, true, false))\r\n    if (error) throw new Error(error.message)\r\n\r\n    return tables.qtr.map(function (t) {\r\n        return t.qFields.map(function (f) {\r\n            return { table: t.qName, field: f.qName }\r\n        })\r\n    }).flat()\r\n}\r\n\r\nasync function mGetTables() {\r\n    let [qTables, qTablesError] = await handlePromise(this.getTablesAndKeys({}, {}, 0, true, false))\r\n    if (qTablesError) throw new Error(qTablesError.message)\r\n\r\n    return qTables.qtr.map((t) => t.qName)\r\n}\r\n\r\nasync function mGetFields() {\r\n    let [qTables, qTablesError] = await handlePromise(this.getTablesAndKeys({}, {}, 0, true, false))\r\n    if (qTablesError) throw new Error(qTablesError.message)\r\n\r\n    return qTables.qtr.map(function (t) {\r\n        return t.qFields.map(function (f) {\r\n            return f.qName\r\n        })\r\n    }).flat()\r\n}\r\n\r\nasync function mCreateSessionListbox(fieldName, type = \"session-listbox\") {\r\n    let lbDef = objectDefinitions.listBox\r\n    lbDef.field.qListObjectDef.qDef.qFieldDefs = [fieldName]\r\n    lbDef.qInfo.qType = type\r\n\r\n    let [sessionObj, sessionObjErr] = await handlePromise(this.createSessionObject(lbDef))\r\n    if (sessionObjErr) throw new Error(sessionObjErr.message)\r\n\r\n    let [layout, layoutError] = await handlePromise(sessionObj.getLayout())\r\n    if (layoutError) throw new Error(layoutError.message)\r\n\r\n    return {\r\n        sessionObj,\r\n        layout\r\n    }\r\n}\r\n\r\nmodule.exports = {\r\n    mGetTablesAndFields,\r\n    mGetTables,\r\n    mGetFields,\r\n    mCreateSessionListbox\r\n} ","const { handlePromise } = require('../../lib/helpers');\r\n\r\nasync function mExtensionObjectsAll() {\r\n    let [allInfos, error] = await handlePromise(this.getAllInfos())\r\n    if (error) throw new Error(error.message)\r\n\r\n    return await filterOnlyExtensionObjects(this, allInfos)\r\n}\r\n\r\nasync function filterOnlyExtensionObjects(qDoc, allObjects) {    \r\n    return await Promise.all(allObjects.map(async function (extObj) {\r\n        let isReallyExtension = await realExtensionCheck(qDoc, extObj.qId)\r\n\r\n        if (isReallyExtension.isExtension) {\r\n            return {\r\n                appName: qDoc.id,\r\n                objId: isReallyExtension.qObjProps.qInfo.qId,\r\n                objType: isReallyExtension.qObjProps.qInfo.qType,\r\n                extName: isReallyExtension.qObjProps.extensionMeta.name,\r\n                extVersion: isReallyExtension.qObjProps.version,\r\n                extVisible: isReallyExtension.qObjProps.extensionMeta.visible,\r\n                extIsBundle: !isReallyExtension.qObjProps.extensionMeta.isThirdParty,\r\n                extIsLibrary: isReallyExtension.qObjProps.extensionMeta.isLibraryItem,\r\n                qProps: isReallyExtension.qObjProps\r\n            }\r\n        }\r\n    })).then(function (o) {\r\n        // make sure we filter out all object which are not \r\n        // native object but are not extensions as well \r\n        return o.filter(function (a) {\r\n            return a != undefined\r\n        })\r\n    })\r\n}\r\n\r\nconst realExtensionCheck = async function (qDoc, objId) {\r\n    let nativeObjectTypes = [\r\n        \"barchart\",\r\n        \"boxplot\",\r\n        \"combochart\",\r\n        \"distributionplot\",\r\n        \"gauge\",\r\n        \"histogram\",\r\n        \"kpi\",\r\n        \"linechart\",\r\n        \"piechart\",\r\n        \"pivot-table\",\r\n        \"scatterplot\",\r\n        \"table\",\r\n        \"treemap\",\r\n        \"extension\",\r\n        \"map\",\r\n        \"listbox\",\r\n        \"filterpane\",\r\n        \"title\",\r\n        \"paragraph\"\r\n    ]\r\n\r\n    let [qObj, qObjError] = await handlePromise(qDoc.getObject(objId))\r\n    if (qObjError) return { isExtension: false }\r\n\r\n    let [qObjProps, qObjPropsError] = await handlePromise(qObj.getProperties())\r\n    if (qObjPropsError) throw new Error(qObjPropsError.message)\r\n    if (!qObjProps.visualization) return { isExtension: false }\r\n\r\n    let isNative = nativeObjectTypes.indexOf(qObjProps.visualization)\r\n    return { qObjProps, isExtension: (isNative == -1 && qObjProps.extensionMeta) ? true : false }\r\n}\r\n\r\nmodule.exports = {\r\n    mExtensionObjectsAll\r\n}","const objectDefinitions = require('./object-definitions.js');\r\nconst { handlePromise } = require('../../lib/helpers');\r\n\r\nasync function mUnbuild() {\r\n    return await Promise.all([\r\n        await unbuildVariables(this),\r\n        await unbuildScript(this),\r\n        await unbuildAppProperties(this),\r\n        await unbuildConnections(this),\r\n        await unbuildEntities(this)\r\n    ]).then((data) => ({\r\n        variables: data[0],\r\n        script: data[1],\r\n        appProperties: data[2],\r\n        connections: data[3],\r\n        dimensions: data[4].dimensions,\r\n        measures: data[4].measures,\r\n        objects: data[4].objects\r\n    }))\r\n}\r\n\r\nasync function unbuildVariables(app) {\r\n    let objProp = objectDefinitions.variableList\r\n    objProp.qShowSession = false\r\n    objProp.qShowConfig = false\r\n    objProp.qShowReserved = false\r\n\r\n    let [sessionObj, sessionObjErr] = await handlePromise(app.createSessionObject(objProp))\r\n    if (sessionObjErr) throw new Error('unbuild variables: cannot create session object');\r\n\r\n    let [sessionObjLayout, sessionObjLayoutErr] = await handlePromise(sessionObj.getLayout())\r\n    if (sessionObjLayoutErr) throw new Error('unbuild variables: cannot get session object layout');\r\n\r\n    let [delSessionObj, delSessionObjErr] = await handlePromise(app.destroySessionObject(sessionObj.id))\r\n    if (delSessionObjErr) throw new Error('unbuild variables: cannot delete session object');\r\n\r\n    return sessionObjLayout.qVariableList.qItems\r\n}\r\n\r\nasync function unbuildScript(app) {\r\n    let [script, scriptErr] = await handlePromise(app.getScript())\r\n    if (scriptErr) throw new Error('unbuild script: cannot fetch script');\r\n\r\n    return script\r\n}\r\n\r\nasync function unbuildAppProperties(app) {\r\n    let [appProperties, appPropertiesError] = await handlePromise(app.getAppProperties())\r\n    if (appPropertiesError) throw new Error('unbuild app properties: cannot fetch app properties');\r\n\r\n    return appProperties\r\n\r\n}\r\n\r\nasync function unbuildConnections(app) {\r\n    let [appConnections, appConnectionsErr] = await handlePromise(app.getConnections())\r\n    if (appConnectionsErr) throw new Error('unbuild connections: cannot fetch app connections');\r\n\r\n    return appConnections\r\n}\r\n\r\nasync function unbuildEntities(app) {\r\n    let data = {\r\n        dimensions: [],\r\n        measures: [],\r\n        objects: []\r\n    }\r\n\r\n    let errors = []\r\n\r\n    // get list of all objects\r\n    let [appAllInfos, appAllInfosErr] = await handlePromise(app.getAllInfos())\r\n    if (appAllInfosErr) throw new Error('unbuild app infos: cannot fetch all app infos')\r\n\r\n    return Promise.all(appAllInfos.map(async function (item) {\r\n        if (item.qType == 'dimension') {\r\n            let [dim, dimErr] = await handlePromise(app.getDimension(item.qId))\r\n            if (dimErr) throw new Error('unbuild dimension: cannot fetch dimension')\r\n\r\n            let [dimProp, dimPropErr] = await handlePromise(dim.getProperties())\r\n            if (dimPropErr) throw new Error('unbuild dimension: cannot fetch dimension properties')\r\n\r\n            data.dimensions.push(dimProp)\r\n        }\r\n\r\n        if (item.qType == 'measure') {\r\n            let [measure, measureErr] = await handlePromise(app.getMeasure(item.qId))\r\n            if (measureErr) throw new Error('unbuild dimension: cannot fetch measure')\r\n\r\n            let [measureProp, measurePropErr] = await handlePromise(measure.getProperties())\r\n            if (measurePropErr) throw new Error('unbuild dimension: cannot fetch measure properties')\r\n\r\n            data.measures.push(measureProp)\r\n        }\r\n\r\n        if (item.qType != 'dimension' && item.qType != 'measure') {\r\n            let o = await processObject(item, app)\r\n\r\n            if (!o.error) data.objects.push(o)\r\n            if (o.error) errors.push(o)\r\n        }\r\n    })).then(() => data)\r\n}\r\n\r\nasync function processObject(item, app) {\r\n    let [obj, objErr] = await handlePromise(app.getObject(item.qId))\r\n\r\n    // embeddedsnapshot, snapshot, hiddenbookmark, story --> need to be handled differently\r\n    if (objErr) return { ...item, error: true }\r\n\r\n    let [parent, parentErr] = await handlePromise(obj.getParent())\r\n    let [children, childrenErr] = await handlePromise(obj.getChildInfos())\r\n\r\n    if (childrenErr) throw new Error(`unbuild entity: cannot fetch entity children`)\r\n\r\n    // parent-less objects - masterobject, sheet, appprops, LoadModel\r\n    if (parentErr && children.length > 0) {\r\n        let [propTree, propTreeErr] = await handlePromise(obj.getFullPropertyTree())\r\n        if (propTreeErr) throw new Error('unbuild entity: cannot fetch entity full property tree')\r\n\r\n        return propTree\r\n    }\r\n\r\n    let [prop, propErr] = await handlePromise(obj.getProperties())\r\n    if (propErr) throw new Error('unbuild entity: cannot fetch entity properties')\r\n\r\n    return prop\r\n}\r\n\r\nmodule.exports = {\r\n    mUnbuild\r\n}","const { handlePromise } = require('../../lib/helpers');\r\n\r\nasync function mBuild({\r\n    variables = [],\r\n    script = false,\r\n    appProperties = {},\r\n    connections = [],\r\n    measures = [],\r\n    dimensions = [],\r\n    objects = [] }) {\r\n\r\n    let [appConnections, error] = await handlePromise(this.getConnections())\r\n    if (error) throw new Error('build: cannot get app connections')\r\n\r\n    return Promise.all([\r\n        await processMeasures(measures, this),\r\n        await processDimensions(dimensions, this),\r\n        await processVariables(variables, this),\r\n        await processScript(script, this),\r\n        await processAppProperties(appProperties, this),\r\n        await processConnections(appConnections, connections, this),\r\n        await processObjects(objects, this)\r\n    ]).then(function (d) {\r\n        return {\r\n            measures: d[0],\r\n            dimensions: d[1],\r\n            variables: d[2],\r\n            script: d[3],\r\n            appProperties: d[4],\r\n            connections: d[5],\r\n            objects: d[6]\r\n        }\r\n    })\r\n}\r\n\r\nasync function processMeasures(measures, app) {\r\n    return Promise.all(measures.map(async function (measure) {\r\n        let [obj, objErr] = await handlePromise(app.getMeasure(measure.qInfo.qId))\r\n\r\n        // the measure do not exists and need to be created\r\n        if (objErr) {\r\n            let [created, error] = await handlePromise(app.createMeasure(measure))\r\n            if (error) throw new Error(`build measure: cannot create measure \"${measure.qInfo.qId}\": ${error.message}`)\r\n\r\n            return { qId: measure.qInfo.qId, status: 'Created' }\r\n        }\r\n\r\n        // the measure exists and need to be updated\r\n        let [updated, error] = await handlePromise(obj.setProperties(measure))\r\n        if (error) throw new Error(`build measure: cannot update measure \"${measure.qInfo.qId}\": ${error.message}`)\r\n\r\n        return { qId: measure.qInfo.qId, status: 'Updated' }\r\n    }))\r\n}\r\n\r\nasync function processDimensions(dimensions, app) {\r\n    return Promise.all(dimensions.map(async function (dimension) {\r\n        let [obj, objErr] = await handlePromise(app.getDimension(dimension.qInfo.qId))\r\n\r\n        // the dimension do not exists and need to be created\r\n        if (objErr) {\r\n            let [created, error] = await handlePromise(app.createDimension(dimension))\r\n            if (error) throw new Error(`build dimension: cannot create dimension \"${dimension.qInfo.qId}\": ${error.message}`)\r\n\r\n            return { qId: dimension.qInfo.qId, status: 'Created' }\r\n        }\r\n\r\n        // the dimension exists and need to be updated\r\n        let [updated, error] = await handlePromise(obj.setProperties(measure))\r\n        if (error) throw new Error(`build dimension: cannot update dimension \"${dimension.qInfo.qId}\": ${error.message}`)\r\n\r\n        return { qId: dimension.qInfo.qId, status: 'Updated' }\r\n    }))\r\n}\r\n\r\nasync function processScript(script, app) {\r\n    let [s, error] = await handlePromise(app.setScript(script))\r\n    if (error) throw new Error(`build script: cannot set script: ${error.message}`)\r\n\r\n    return { status: 'Set' }\r\n}\r\n\r\nasync function processAppProperties(appProperties, app) {\r\n    let [update, error] = await handlePromise(app.setAppProperties(appProperties))\r\n    if (error) throw new Error(`build app properties: cannot set app properties: ${error.message}`)\r\n\r\n    return { status: 'Set' }\r\n}\r\n\r\nasync function processVariables(variables, app) {\r\n    return Promise.all(variables.map(async function (variable) {\r\n        let [qVar, qVarError] = await handlePromise(app.getVariableByName(variable.qName))\r\n\r\n        if (qVarError) {\r\n            let [created, error] = await handlePromise(app.createVariableEx(variable))\r\n            if (error) throw new Error(`build variable: cannot create variable \"${variable.qName}\": ${error.message}`)\r\n\r\n            return { qId: variable.qName, status: 'Created' }\r\n        }\r\n\r\n        let [updated, error] = await handlePromise(qVar.setProperties(variable))\r\n        if (error) throw new Error(`build variable: cannot update variable \"${variable.qName}\": ${error.message}`)\r\n\r\n        return { qId: variable.qName, status: 'Updated' }\r\n    }))\r\n}\r\n\r\nasync function processConnections(appConnections, connections, app) {\r\n    return Promise.all(connections.map(async function (connection) {\r\n        let conn = appConnections.find(o => o.qName === connection.qName)\r\n\r\n        if (!conn) {\r\n            let [create, error] = await handlePromise(app.createConnection(connection))\r\n            if (error) throw new Error(`build connection: cannot create connection \"${connection.qName}\": ${error.message}`)\r\n\r\n            return { qId: connection.qName, status: 'Created' }\r\n        }\r\n\r\n        let [modify, error] = await handlePromise(app.modifyConnection(conn.qId, connection, true))\r\n        if (error) throw new Error(`build connection: cannot modify connection \"${connection.qName}\": ${error.message}`)\r\n\r\n        return { qId: connection.qName, status: 'Updated' }\r\n\r\n    }))\r\n}\r\n\r\nasync function processObjects(objects, app) {\r\n    return Promise.all(objects.map(async function (object) {\r\n        let objId, objType\r\n        let isGenericObject = false;\r\n\r\n        //if the object is GenericObject - the id and the type are in a slightly different path\r\n        if (!object.qInfo) {\r\n            isGenericObject = true\r\n            objId = object.qProperty.qInfo.qId\r\n            objType = object.qProperty.qInfo.qType\r\n        } else {\r\n            objId = object.qInfo.qId\r\n            objType = object.qInfo.qType\r\n        }\r\n\r\n\r\n        let [obj, objError] = await handlePromise(app.getObject(objId))\r\n\r\n        if (!objError) {\r\n            // if its GenericObject we have to set the the props using setFullPropertyTree\r\n            if (isGenericObject) {\r\n                let [updated, error] = await handlePromise(obj.setFullPropertyTree(object))\r\n                if (error) throw new Error(`build object: cannot update object \"${objId}\": ${error.message}`)\r\n\r\n                return { qId: objId, status: 'Updated' }\r\n            }\r\n\r\n            // if not GenericObject then use the \"usual\" setProperties\r\n            if (!isGenericObject) {\r\n                let [updated, error] = await handlePromise(obj.setProperties(object))\r\n                if (error) throw new Error(`build object: cannot update object \"${objId}\": ${error.message}`)\r\n\r\n                return { qId: objId, status: 'Updated' }\r\n            }\r\n        }\r\n\r\n        // same rules are applied when we have to create the object\r\n        if (objError) {\r\n            if (isGenericObject) {\r\n\r\n                let [o, oError] = await handlePromise(app.createObject({\r\n                    qInfo: {\r\n                        qId: `${objId}`,\r\n                        qType: objType\r\n                    }\r\n                }))\r\n                if (oError) throw new Error(`build object: cannot create object \"${objId}\": ${oError.message}`)\r\n\r\n                let [updated, updatedError] = await handlePromise(o.setFullPropertyTree(object))\r\n                if (updatedError) throw new Error(`build object: cannot update object \"${objId}\": ${updatedError.message}`)\r\n\r\n                return { qId: objId, status: 'Created' }\r\n            }\r\n\r\n            if (!isGenericObject) {\r\n                let [created, createdError] = await handlePromise(app.createObject(object))\r\n                if (createdError) throw new Error(`build object: cannot create object: \"${objId}\": ${createdError.message}`)\r\n\r\n                return { qId: objId, status: 'Created' }\r\n            }\r\n        }\r\n    }))\r\n}\r\n\r\nmodule.exports = {\r\n    mBuild\r\n}\r\n","const qVariables = require('./mixins/doc/qVariables.js')\r\nconst qSelections = require('./mixins/doc/qSelections.js')\r\nconst qTablesAndFields = require('./mixins/doc/qTablesAndFields.js')\r\nconst extensionObjects = require('./mixins/doc/extension-objects.js')\r\n// const unbuildVariables = require('./mixins/doc/unbuild/variables.js')\r\n// const unbuildScript = require('./mixins/doc/unbuild/script.js')\r\n// const unbuildAppProperties = require('./mixins/doc/unbuild/appProperties.js')\r\n// const unbuildConnections = require('./mixins/doc/unbuild/connections.js')\r\n// const unbuildEntities = require('./mixins/doc/unbuild/entities.js')\r\nconst unbuild = require('./mixins/doc/unbuild.js')\r\nconst build = require('./mixins/doc/build.js')\r\n\r\nconst docMixin = [\r\n    {\r\n        types: ['Doc'],\r\n        init(args) {\r\n\r\n        },\r\n        extend: {\r\n            ...qSelections,\r\n            ...qTablesAndFields,\r\n            ...qVariables,\r\n            ...extensionObjects,\r\n            // ...unbuildVariables,\r\n            // ...unbuildScript,\r\n            // ...unbuildAppProperties,\r\n            // ...unbuildConnections,\r\n            // ...unbuildEntities,\r\n            ...unbuild,\r\n            ...build\r\n        },\r\n    }\r\n]\r\n\r\nmodule.exports = docMixin"],"names":["sessionList","variableList","listBox","handlePromise","promise","then","data","undefined","catch","error","Promise","resolve","require$$0","mVariableGetAll","async","showSession","showConfig","showReserved","objProp","objectDefinitions","qShowSession","qShowConfig","qShowReserved","sessionObj","sessionObjError","this","createSessionObject","Error","message","layout","layoutError","getLayout","qVariableList","qItems","mVariableUpdateById","id","definition","comment","variable","variableError","getVariableById","variableProps","variablePropsError","getProperties","qDefinition","qComment","setProps","setPropsError","setProperties","newProps","newPropsError","mVariableUpdateByName","name","getVariableByName","mVariableCreate","varProps","created","createdError","createVariableEx","props","propsError","iGetSelectionsNative","qDoc","selections","selectionsError","destroy","destroyError","destroySessionObject","mSelectionsAll","qSelectionObject","mSelectionsFields","qSelections","map","s","qField","mSelectionsSimple","groupByField","values","qSelectedFieldSelectionInfo","f","qName","field","value","flat","mSelectInField","fieldName","toggle","lbDef","qListObjectDef","qDef","qFieldDefs","qInfo","qType","sessionObjErr","index","qListObject","qDataPages","qMatrix","filter","m","indexOf","qText","e","qElemNumber","selection","selectionError","selectListObjectValues","mGetTablesAndFields","tables","getTablesAndKeys","qtr","t","qFields","table","mGetTables","qTables","qTablesError","mGetFields","mCreateSessionListbox","type","realExtensionCheck","objId","qObj","qObjError","getObject","isExtension","qObjProps","qObjPropsError","visualization","extensionMeta","mExtensionObjectsAll","allInfos","getAllInfos","allObjects","all","extObj","isReallyExtension","qId","appName","objType","extName","extVersion","version","extVisible","visible","extIsBundle","isThirdParty","extIsLibrary","isLibraryItem","qProps","o","a","filterOnlyExtensionObjects","unbuildVariables","app","sessionObjLayout","sessionObjLayoutErr","delSessionObj","delSessionObjErr","unbuildScript","script","scriptErr","getScript","unbuildAppProperties","appProperties","appPropertiesError","getAppProperties","unbuildConnections","appConnections","appConnectionsErr","getConnections","unbuildEntities","dimensions","measures","objects","appAllInfos","appAllInfosErr","item","dim","dimErr","getDimension","dimProp","dimPropErr","push","measure","measureErr","getMeasure","measureProp","measurePropErr","obj","objErr","parent","parentErr","getParent","children","childrenErr","getChildInfos","length","propTree","propTreeErr","getFullPropertyTree","prop","propErr","processObject","mUnbuild","variables","connections","processMeasures","createMeasure","status","updated","processDimensions","dimension","createDimension","processScript","setScript","processAppProperties","update","setAppProperties","processVariables","qVar","qVarError","processConnections","connection","conn","find","create","createConnection","modify","modifyConnection","processObjects","object","isGenericObject","qProperty","objError","setFullPropertyTree","oError","createObject","updatedError","types","init","args","extend","qTablesAndFields","qVariables","extensionObjects","unbuild","mBuild","d"],"mappings":"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"}