{"version":3,"file":"enigma-mixin.min.js","sources":["../src/mixins/object-definitions.js","../src/mixins/selections.js","../src/main.js","../src/mixins/variables.js","../src/mixins/tables.js"],"sourcesContent":["const sessionList = {\r\n    \"qInfo\": {\r\n        \"qId\": \"\",\r\n        \"qType\": \"SessionLists\"\r\n    },\r\n    \"qSelectionObjectDef\": {}\r\n}\r\n\r\nconst variableList = {\r\n    \"qInfo\": {\r\n        \"qType\": \"VariableList\"\r\n    },\r\n    \"qVariableListDef\": {\r\n        \"qType\": \"variable\"\r\n    }\r\n}\r\n\r\nmodule.exports = {\r\n    sessionList,\r\n    variableList\r\n}","const objectDefinitions = require('./object-definitions.js')\r\n\r\n\r\nasync function getCurrSelectionFields() {\r\n    let sessionObj = await _this.api.createSessionObject(objectDefinitions.sessionList)\r\n    let selections = await sessionObj.getLayout()\r\n    return selections\r\n}\r\n\r\n/**\r\n * Get current selections\r\n */\r\nasync function getCurrentSelections() {\r\n\r\n    let selections = await getCurrSelectionFields()\r\n\r\n    let fieldsSelected = selections.qSelectionObject.qSelections.map(function (s) {\r\n        return s.qField\r\n    })\r\n\r\n    return { selections: selections.qSelectionObject.qSelections, fields: fieldsSelected }\r\n}\r\n\r\n/**\r\n * Select value(s) in a field\r\n * @param {string} fieldName - Name of the field\r\n * @param {array} values - String array with the values to be selected\r\n * @param {boolean} [toggle=false] toggle - How to apply the selection\r\n */\r\nasync function selectInField({ fieldName, values, toggle = false }) {\r\n    let field = await _this.api.getField(fieldName)\r\n\r\n    let valuesToSelect = values.map(function (v) {\r\n        return {\r\n            qText: v\r\n        }\r\n    })\r\n\r\n    try {\r\n        let selection = await field.selectValues({ qFieldValues: valuesToSelect, qToggleMode: toggle })\r\n        return selection\r\n    } catch(e) {\r\n        console.log(e.message)\r\n        return false\r\n    }\r\n}\r\n\r\nmodule.exports = {\r\n    getCurrSelectionFields,\r\n    selectInField,\r\n    getCurrentSelections\r\n}\r\n","const qVariables = require('./mixins/variables.js')\r\nconst qSelections = require('./mixins/selections.js')\r\nconst qTablesAndFields = require('./mixins/tables.js')\r\n\r\nconst docMixin = {\r\n    types: ['Doc'],\r\n    init(args) {\r\n        _this = args\r\n        ConfiguredPromise = args.config.Promise;\r\n    },\r\n    extend: {\r\n        mixin: {\r\n            qVariables,\r\n            qSelections,\r\n            qTablesAndFields\r\n        }\r\n    },\r\n};\r\n\r\nmodule.exports = docMixin","const objectDefinitions = require('./object-definitions.js');\r\n\r\nasync function getAllVariables({ showSession = false, showConfig = false, showReserved = false } = {}) {\r\n    let objProp = objectDefinitions.variableList\r\n    objProp.qShowSession = showSession\r\n    objProp.qShowConfig = showConfig\r\n    objProp.qShowReserved = showReserved\r\n\r\n    let sessionObj = await _this.api.createSessionObject(objProp)\r\n    let sessionObjLayout = await sessionObj.getLayout()\r\n    return sessionObjLayout.qVariableList.qItems\r\n}\r\n\r\nasync function updateVariable(variable) {\r\n    let variableContent = await _this.api.getVariableById(variable.qInfo.qId)\r\n    let newContent = await variableContent.setProperties(variable)\r\n\r\n    return newContent\r\n}\r\n\r\nasync function createVariable({ variableName, variableComment = '', variableDefinition }) {\r\n    let varProps = {\r\n        \"qInfo\": {\r\n            \"qType\": \"variable\"\r\n        },\r\n        \"qName\": variableName,\r\n        \"qComment\": variableComment,\r\n        \"qDefinition\": variableDefinition\r\n    }\r\n\r\n    let result = await _this.api.createVariableEx(varProps)\r\n\r\n    return result\r\n}\r\n\r\n\r\nmodule.exports = {\r\n    getAllVariables,\r\n    updateVariable,\r\n    createVariable\r\n}\r\n","// async function getTablesAndKeys() {\r\n\r\n//     let tables = await _this.api.getTablesAndKeys({}, {}, 0, true, false)\r\n\r\n//     let f = [];\r\n\r\n//     for (let table of tables.qtr) {\r\n//         for (let field of table.qFields) {\r\n//             f.push({ table: table.qName, field: field.qName })\r\n//         }\r\n//     }\r\n\r\n//     return { tables: tables, fields: f }\r\n// }\r\n\r\nasync function getTablesAndFields() {\r\n    let tables = await _this.api.getTablesAndKeys({}, {}, 0, true, false)\r\n\r\n    let f = [];\r\n\r\n    for (let table of tables.qtr) {\r\n        for (let field of table.qFields) {\r\n            f.push({ table: table.qName, field: field.qName })\r\n        }\r\n    }\r\n\r\n    return f\r\n}\r\n\r\nasync function getTables() {\r\n    let tables = await _this.api.getTablesAndKeys({}, {}, 0, true, false)\r\n\r\n    let t = [];\r\n\r\n    for (let table of tables.qtr) {\r\n        t.push(table.qName)\r\n    }\r\n\r\n    return t\r\n}\r\n\r\nasync function getFields() {\r\n\r\n    let tables = await _this.api.getTablesAndKeys({}, {}, 0, true, false)\r\n\r\n    let f = [];\r\n\r\n    for (let table of tables.qtr) {\r\n        for (let field of table.qFields) {\r\n            f.push(field.qName)\r\n        }\r\n    }\r\n\r\n    return f\r\n}\r\n\r\nmodule.exports = {\r\n    // getTablesAndKeys,\r\n    getTablesAndFields,\r\n    getTables,\r\n    getFields\r\n}"],"names":["sessionList","variableList","async","getCurrSelectionFields","sessionObj","_this","api","createSessionObject","objectDefinitions","getLayout","types","init","args","ConfiguredPromise","config","Promise","extend","mixin","getAllVariables","showSession","showConfig","showReserved","objProp","qShowSession","qShowConfig","qShowReserved","qVariableList","qItems","updateVariable","variable","variableContent","getVariableById","qInfo","qId","setProperties","createVariable","variableName","variableComment","variableDefinition","varProps","createVariableEx","selectInField","fieldName","values","toggle","field","getField","valuesToSelect","map","v","qText","selectValues","qFieldValues","qToggleMode","e","console","log","message","getCurrentSelections","selections","fieldsSelected","qSelectionObject","qSelections","s","qField","fields","getTablesAndFields","tables","getTablesAndKeys","f","table","qtr","qFields","push","qName","getTables","t","getFields"],"mappings":"qMAiBA,MAAiB,CACbA,YAlBgB,OACP,KACE,SACE,oCAEU,IAcvBC,aAXiB,OACR,OACI,iCAEO,OACP,cCVjBC,eAAeC,QACPC,QAAmBC,MAAMC,IAAIC,oBAAoBC,EAAkBR,0BAChDI,EAAWK,kBCDrB,CACbC,MAAO,CAAC,OACRC,KAAKC,GACDP,MAAQO,EACRC,kBAAoBD,EAAKE,OAAOC,SAEpCC,OAAQ,CACJC,MAAO,YCyBE,CACbC,gBAnCJhB,gBAA+BiB,YAAEA,GAAc,EAAhBC,WAAuBA,GAAa,EAApCC,aAA2CA,GAAe,GAAU,QAC3FC,EAAUd,EAAkBP,aAChCqB,EAAQC,aAAeJ,EACvBG,EAAQE,YAAcJ,EACtBE,EAAQG,cAAgBJ,MAEpBjB,QAAmBC,MAAMC,IAAIC,oBAAoBe,gBACxBlB,EAAWK,aAChBiB,cAAcC,QA4BtCC,eAzBJ1B,eAA8B2B,OACtBC,QAAwBzB,MAAMC,IAAIyB,gBAAgBF,EAASG,MAAMC,kBAC9CH,EAAgBI,cAAcL,IAwBrDM,eAnBJjC,gBAA8BkC,aAAEA,EAAFC,gBAAgBA,EAAkB,GAAlCC,mBAAsCA,QAC5DC,EAAW,OACF,OACI,kBAEJH,WACGC,cACGC,gBAGAjC,MAAMC,IAAIkC,iBAAiBD,iBFiBjC,CACbpC,uBAAAA,EACAsC,cApBJvC,gBAA6BwC,UAAEA,EAAFC,OAAaA,EAAbC,OAAqBA,GAAS,QACnDC,QAAcxC,MAAMC,IAAIwC,SAASJ,GAEjCK,EAAiBJ,EAAOK,IAAI,SAAUC,SAC/B,CACHC,MAAOD,sBAKWJ,EAAMM,aAAa,CAAEC,aAAcL,EAAgBM,YAAaT,IAExF,MAAMU,UACJC,QAAQC,IAAIF,EAAEG,UACP,IAOXC,qBAtCJxD,qBAEQyD,QAAmBxD,IAEnByD,EAAiBD,EAAWE,iBAAiBC,YAAYd,IAAI,SAAUe,UAChEA,EAAEC,eAGN,CAAEL,WAAYA,EAAWE,iBAAiBC,YAAaG,OAAQL,sBGoCzD,CAEbM,mBA3CJhE,qBACQiE,QAAe9D,MAAMC,IAAI8D,iBAAiB,GAAI,GAAI,GAAG,GAAM,GAE3DC,EAAI,OAEH,IAAIC,KAASH,EAAOI,QAChB,IAAI1B,KAASyB,EAAME,QACpBH,EAAEI,KAAK,CAAEH,MAAOA,EAAMI,MAAO7B,MAAOA,EAAM6B,eAI3CL,GAiCPM,UA9BJzE,qBACQiE,QAAe9D,MAAMC,IAAI8D,iBAAiB,GAAI,GAAI,GAAG,GAAM,GAE3DQ,EAAI,OAEH,IAAIN,KAASH,EAAOI,IACrBK,EAAEH,KAAKH,EAAMI,cAGVE,GAsBPC,UAnBJ3E,qBAEQiE,QAAe9D,MAAMC,IAAI8D,iBAAiB,GAAI,GAAI,GAAG,GAAM,GAE3DC,EAAI,OAEH,IAAIC,KAASH,EAAOI,QAChB,IAAI1B,KAASyB,EAAME,QACpBH,EAAEI,KAAK5B,EAAM6B,cAIdL"}