{"version":3,"file":"enigma-mixin.min.js","sources":["../src/mixins/object-definitions.js","../src/mixins/selections.js","../src/main.js","../src/mixins/variables.js","../src/mixins/tables.js"],"sourcesContent":["const sessionList = {\r\n    \"qInfo\": {\r\n        \"qId\": \"\",\r\n        \"qType\": \"SessionLists\"\r\n    },\r\n    \"qSelectionObjectDef\": {}\r\n}\r\n\r\nconst variableList = {\r\n    \"qInfo\": {\r\n        \"qType\": \"VariableList\"\r\n    },\r\n    \"qVariableListDef\": {\r\n        \"qType\": \"variable\"\r\n    }\r\n}\r\n\r\nmodule.exports = {\r\n    sessionList,\r\n    variableList\r\n}","const objectDefinitions = require('./object-definitions.js')\r\n\r\nasync function getCurrSelectionFields() {\r\n    let sessionObj = await _this.api.createSessionObject(objectDefinitions.sessionList)\r\n    let selections = await sessionObj.getLayout()\r\n    return selections\r\n}\r\n\r\nasync function getCurrentSelections() {\r\n\r\n    let selections = await getCurrSelectionFields()\r\n\r\n    let fieldsSelected = selections.qSelectionObject.qSelections.map(function (s) {\r\n        return s.qField\r\n    })\r\n\r\n    // let fields = await getSelectionFields(doc, fieldsSelected)\r\n    return { selections: selections.qSelectionObject.qSelections, fields: fieldsSelected }\r\n}\r\n\r\nasync function selectInField({ fieldName, values, toggle = false }) {\r\n    let field = await _this.api.getField(fieldName)\r\n\r\n    let valuesToSelect = values.map(function (v) {\r\n        return {\r\n            qText: v\r\n        }\r\n    })\r\n\r\n    try {\r\n        let selection = await field.selectValues({ qFieldValues: valuesToSelect, qToggleMode: toggle })\r\n        return selection\r\n    } catch(e) {\r\n        console.log(e.message)\r\n        return false\r\n    }\r\n}\r\n\r\nmodule.exports = {\r\n    getCurrSelectionFields,\r\n    selectInField,\r\n    getCurrentSelections\r\n}\r\n","const qVariables = require('./mixins/variables.js')\r\nconst qSelections = require('./mixins/selections.js')\r\nconst qTablesAndFields = require('./mixins/tables.js')\r\n\r\nconst docMixin = {\r\n    types: ['Doc'],\r\n    init(args) {\r\n        _this = args\r\n        ConfiguredPromise = args.config.Promise;\r\n    },\r\n    extend: {\r\n        mixin: {\r\n            qVariables,\r\n            qSelections,\r\n            qTablesAndFields\r\n        }\r\n    },\r\n};\r\n\r\nmodule.exports = docMixin","const objectDefinitions = require('./object-definitions.js');\r\n\r\nasync function getAllVariables({ qDoc, showSession = false, showConfig = false, showReserved = false }) {\r\n    let objProp = objectDefinitions.variableList\r\n    objProp.qShowSession = showSession,\r\n        objProp.qShowConfig = showConfig,\r\n        objProp.qShowReserved = showReserved\r\n\r\n    let sessionObj = await qDoc.createSessionObject(objProp)\r\n    let sessionObjLayout = await sessionObj.getLayout()\r\n    return sessionObjLayout\r\n}\r\n\r\nasync function updateVariable({ qDoc, variable }) {\r\n    let variableContent = await qDoc.getVariableById(variable.qInfo.qId)\r\n    let newContent = await variableContent.setProperties(variable)\r\n\r\n    return newContent\r\n}\r\n\r\nasync function createVariable({ qDoc, variableName, variableComment = '', variableDefinition }) {\r\n    let varProps = {\r\n        \"qInfo\": {\r\n            \"qType\": \"variable\"\r\n        },\r\n        \"qName\": variableName,\r\n        \"qComment\": variableComment,\r\n        \"qDefinition\": variableDefinition\r\n    }\r\n\r\n    let result = await doc.createVariableEx(varProps)\r\n\r\n    return result\r\n}\r\n\r\n\r\nmodule.exports = {\r\n    getAllVariables,\r\n    updateVariable,\r\n    createVariable\r\n}\r\n","async function getTablesAndKeys(qDoc) {\r\n\r\n    let tables = await qDoc.getTablesAndKeys({}, {}, 0, true, false)\r\n\r\n    let f = [];\r\n\r\n    for (let table of tables.qtr) {\r\n        for (let field of table.qFields) {\r\n            f.push({ table: table.qName, field: field.qName })\r\n        }\r\n    }\r\n\r\n    return { tables: tables, fields: f }\r\n}\r\n\r\nasync function getTablesAndFields(qDoc) {\r\n    let tables = await qDoc.getTablesAndKeys({}, {}, 0, true, false)\r\n\r\n    let f = [];\r\n\r\n    for (let table of tables.qtr) {\r\n        for (let field of table.qFields) {\r\n            f.push({ table: table.qName, field: field.qName })\r\n        }\r\n    }\r\n\r\n    return f\r\n}\r\n\r\nasync function getTables(qDoc) {\r\n    let tables = await qDoc.getTablesAndKeys({}, {}, 0, true, false)\r\n\r\n    let t = [];\r\n\r\n    for (let table of tables.qtr) {\r\n        t.push(table.qName)\r\n    }\r\n\r\n    return t\r\n}\r\n\r\nasync function getFields(qDoc) {\r\n\r\n    let tables = await qDoc.getTablesAndKeys({}, {}, 0, true, false)\r\n\r\n    let f = [];\r\n\r\n    for (let table of tables.qtr) {\r\n        for (let field of table.qFields) {\r\n            f.push(field.qName)\r\n        }\r\n    }\r\n\r\n    return f\r\n}\r\n\r\nmodule.exports = {\r\n    getTablesAndKeys,\r\n    getTablesAndFields,\r\n    getTables,\r\n    getFields\r\n}"],"names":["sessionList","variableList","async","getCurrSelectionFields","sessionObj","_this","api","createSessionObject","objectDefinitions","getLayout","types","init","args","ConfiguredPromise","config","Promise","extend","mixin","getAllVariables","qDoc","showSession","showConfig","showReserved","objProp","qShowSession","qShowConfig","qShowReserved","updateVariable","variable","variableContent","getVariableById","qInfo","qId","setProperties","createVariable","variableName","variableComment","variableDefinition","varProps","doc","createVariableEx","selectInField","fieldName","values","toggle","field","getField","valuesToSelect","map","v","qText","selectValues","qFieldValues","qToggleMode","e","console","log","message","getCurrentSelections","selections","fieldsSelected","qSelectionObject","qSelections","s","qField","fields","getTablesAndKeys","tables","f","table","qtr","qFields","push","qName","getTablesAndFields","getTables","t","getFields"],"mappings":"qMAiBA,MAAiB,CACbA,YAlBgB,OACP,KACE,SACE,oCAEU,IAcvBC,aAXiB,OACR,OACI,iCAEO,OACP,cCXjBC,eAAeC,QACPC,QAAmBC,MAAMC,IAAIC,oBAAoBC,EAAkBR,0BAChDI,EAAWK,kBCArB,CACbC,MAAO,CAAC,OACRC,KAAKC,GACDP,MAAQO,EACRC,kBAAoBD,EAAKE,OAAOC,SAEpCC,OAAQ,CACJC,MAAO,YCyBE,CACbC,gBAnCJhB,gBAA+BiB,KAAEA,EAAFC,YAAQA,GAAc,EAAtBC,WAA6BA,GAAa,EAA1CC,aAAiDA,GAAe,QACvFC,EAAUf,EAAkBP,aAChCsB,EAAQC,aAAeJ,EACnBG,EAAQE,YAAcJ,EACtBE,EAAQG,cAAgBJ,MAExBlB,QAAmBe,EAAKZ,oBAAoBgB,gBACnBnB,EAAWK,aA6BxCkB,eAzBJzB,gBAA8BiB,KAAEA,EAAFS,SAAQA,QAC9BC,QAAwBV,EAAKW,gBAAgBF,EAASG,MAAMC,kBACzCH,EAAgBI,cAAcL,IAwBrDM,eAnBJhC,gBAA8BiB,KAAEA,EAAFgB,aAAQA,EAARC,gBAAsBA,EAAkB,GAAxCC,mBAA4CA,QAClEC,EAAW,OACF,OACI,kBAEJH,WACGC,cACGC,gBAGAE,IAAIC,iBAAiBF,iBFQ3B,CACbnC,uBAAAA,EACAsC,cApBJvC,gBAA6BwC,UAAEA,EAAFC,OAAaA,EAAbC,OAAqBA,GAAS,QACnDC,QAAcxC,MAAMC,IAAIwC,SAASJ,GAEjCK,EAAiBJ,EAAOK,IAAI,SAAUC,SAC/B,CACHC,MAAOD,sBAKWJ,EAAMM,aAAa,CAAEC,aAAcL,EAAgBM,YAAaT,IAExF,MAAMU,UACJC,QAAQC,IAAIF,EAAEG,UACP,IAOXC,qBAjCJxD,qBAEQyD,QAAmBxD,IAEnByD,EAAiBD,EAAWE,iBAAiBC,YAAYd,IAAI,SAAUe,UAChEA,EAAEC,eAIN,CAAEL,WAAYA,EAAWE,iBAAiBC,YAAaG,OAAQL,sBGuCzD,CACbM,iBAzDJhE,eAAgCiB,OAExBgD,QAAehD,EAAK+C,iBAAiB,GAAI,GAAI,GAAG,GAAM,GAEtDE,EAAI,OAEH,IAAIC,KAASF,EAAOG,QAChB,IAAIzB,KAASwB,EAAME,QACpBH,EAAEI,KAAK,CAAEH,MAAOA,EAAMI,MAAO5B,MAAOA,EAAM4B,cAI3C,CAAEN,OAAQA,EAAQF,OAAQG,IA8CjCM,mBA3CJxE,eAAkCiB,OAC1BgD,QAAehD,EAAK+C,iBAAiB,GAAI,GAAI,GAAG,GAAM,GAEtDE,EAAI,OAEH,IAAIC,KAASF,EAAOG,QAChB,IAAIzB,KAASwB,EAAME,QACpBH,EAAEI,KAAK,CAAEH,MAAOA,EAAMI,MAAO5B,MAAOA,EAAM4B,eAI3CL,GAiCPO,UA9BJzE,eAAyBiB,OACjBgD,QAAehD,EAAK+C,iBAAiB,GAAI,GAAI,GAAG,GAAM,GAEtDU,EAAI,OAEH,IAAIP,KAASF,EAAOG,IACrBM,EAAEJ,KAAKH,EAAMI,cAGVG,GAsBPC,UAnBJ3E,eAAyBiB,OAEjBgD,QAAehD,EAAK+C,iBAAiB,GAAI,GAAI,GAAG,GAAM,GAEtDE,EAAI,OAEH,IAAIC,KAASF,EAAOG,QAChB,IAAIzB,KAASwB,EAAME,QACpBH,EAAEI,KAAK3B,EAAM4B,cAIdL"}